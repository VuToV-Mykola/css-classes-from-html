const fs = require('fs');
const path = require('path');

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
class IssueFixer {
  constructor() {
    this.fixes = [];
  }

  // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ CSS –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–∏ –º—ñ–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
  fixEmptyRulesInMinification() {
    console.log('üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ CSS –ø—Ä–∞–≤–∏–ª–∞–º–∏...');
    
    const fixedMinifyCSS = `
  minifyCSS(css) {
    return css
      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
      .replace(/\\s+/g, ' ') // –ó–∞–º—ñ–Ω—é—î–º–æ –º–Ω–æ–∂–∏–Ω–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏
      .replace(/;\\s*}/g, '}') // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é
      .replace(/{\\s*/g, '{') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø—ñ—Å–ª—è {
      .replace(/;\\s*/g, ';') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø—ñ—Å–ª—è ;
      .replace(/\\s*{\\s*}/g, '') // –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞
      .replace(/}\\s*}/g, '}}') // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –º—ñ–∂ }
      .trim();
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'minifyCSS',
      issue: '–ü–æ—Ä–æ–∂–Ω—ñ CSS –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –º—ñ–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó',
      fix: fixedMinifyCSS,
      description: '–î–æ–¥–∞–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö CSS –ø—Ä–∞–≤–∏–ª {}'
    });
  }

  // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∑–º—ñ—à–∞–Ω–∏—Ö –ª–∞–ø–æ–∫
  fixMixedQuotesRegex() {
    console.log('üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∑–º—ñ—à–∞–Ω–∏—Ö –ª–∞–ø–æ–∫...');
    
    const fixedExtractClasses = `
  extractClasses(html) {
    const classes = new Set();
    
    // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π regex –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ª–∞–ø–æ–∫
    const patterns = [
      /class\\s*=\\s*"([^"]+)"/g,  // –ü–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏
      /class\\s*=\\s*'([^']+)'/g   // –û–¥–∏–Ω–∞—Ä–Ω—ñ –ª–∞–ø–∫–∏
    ];
    
    patterns.forEach(pattern => {
      let match;
      while ((match = pattern.exec(html)) !== null) {
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ –∫–ª–∞—Å–∏ —ñ –¥–æ–¥–∞—î–º–æ –¥–æ Set
        match[1].split(/\\s+/).forEach(cls => {
          if (cls.trim()) {
            classes.add(cls.trim());
          }
        });
      }
    });
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    const complexPattern = /class\\s*=\\s*['"]((?:[^'"\\\\]|\\\\.)*)['"](?:[^>]*class\\s*=\\s*['"]((?:[^'"\\\\]|\\\\.)*)['"]))*/g;
    let complexMatch;
    while ((complexMatch = complexPattern.exec(html)) !== null) {
      for (let i = 1; i < complexMatch.length; i++) {
        if (complexMatch[i]) {
          complexMatch[i].split(/\\s+/).forEach(cls => {
            if (cls.trim()) {
              classes.add(cls.trim());
            }
          });
        }
      }
    }
    
    return Array.from(classes);
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'extractClasses',
      issue: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–º—ñ—à–∞–Ω–∏—Ö –ª–∞–ø–æ–∫',
      fix: fixedExtractClasses,
      description: '–ü–æ–∫—Ä–∞—â–µ–Ω–æ regex –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ª–∞–ø–æ–∫ —Ç–∞ —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤'
    });
  }

  // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSS –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –ø—Ä–∞–≤–∏–ª
  fixCSSGeneration() {
    console.log('üîß –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSS...');
    
    const improvedGenerateClassCSS = `
  generateClassCSS(className, config) {
    const indent = ' '.repeat(config.indentSize || 2);
    let css = \`.\\${className} {\\n\`;
    let hasProperties = false;
    
    // –ë–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–∑–≤–∏ –∫–ª–∞—Å—É
    if (className.includes('container')) {
      css += \`\\${indent}max-width: 1200px;\\n\\${indent}margin: 0 auto;\\n\\${indent}padding: 0 15px;\\n\`;
      hasProperties = true;
    } else if (className.includes('title') || className.includes('heading')) {
      css += \`\\${indent}font-size: 2rem;\\n\\${indent}font-weight: bold;\\n\`;
      hasProperties = true;
    } else if (className.includes('button') || className.includes('btn')) {
      css += \`\\${indent}padding: 10px 20px;\\n\\${indent}border: none;\\n\\${indent}cursor: pointer;\\n\`;
      hasProperties = true;
    } else if (className.includes('nav')) {
      css += \`\\${indent}display: flex;\\n\\${indent}align-items: center;\\n\`;
      hasProperties = true;
    } else if (className.includes('text') || className.includes('paragraph')) {
      css += \`\\${indent}line-height: 1.6;\\n\\${indent}margin-bottom: 1rem;\\n\`;
      hasProperties = true;
    } else if (className.includes('header')) {
      css += \`\\${indent}background: #f8f9fa;\\n\\${indent}padding: 1rem 0;\\n\`;
      hasProperties = true;
    } else if (className.includes('section')) {
      css += \`\\${indent}padding: 2rem 0;\\n\`;
      hasProperties = true;
    } else {
      // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–ª–∞—Å—ñ–≤
      css += \`\\${indent}/* –î–æ–¥–∞–π—Ç–µ —Å—Ç–∏–ª—ñ –¥–ª—è \\${className} */\\n\`;
      css += \`\\${indent}display: block;\\n\`;
      hasProperties = true;
    }
    
    css += '}\\n\\n';
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ CSS —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    return hasProperties ? css : '';
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'generateClassCSS',
      issue: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö CSS –ø—Ä–∞–≤–∏–ª',
      fix: improvedGenerateClassCSS,
      description: '–î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —Ç–∞ –±–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –∫–ª–∞—Å—ñ–≤'
    });
  }

  // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è responsive CSS –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  fixResponsiveCSS() {
    console.log('üîß –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è responsive CSS...');
    
    const improvedResponsiveCSS = `
  generateResponsiveCSS(classes, config) {
    const breakpoints = config.breakpoints || {
      mobile: '320px',
      tablet: '768px',
      desktop: '1158px'
    };
    
    let css = '';
    
    Object.entries(breakpoints).forEach(([device, size]) => {
      let hasResponsiveRules = false;
      let responsiveCSS = \`@media (min-width: \\${size}) {\\n\`;
      
      classes.forEach(className => {
        let deviceCSS = '';
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
        if (device === 'mobile') {
          if (className.includes('container')) {
            deviceCSS = '    padding: 0 10px;\\n';
          } else if (className.includes('title')) {
            deviceCSS = '    font-size: 1.5rem;\\n';
          }
        } else if (device === 'tablet') {
          if (className.includes('container')) {
            deviceCSS = '    padding: 0 20px;\\n';
          } else if (className.includes('title')) {
            deviceCSS = '    font-size: 1.8rem;\\n';
          }
        } else if (device === 'desktop') {
          if (className.includes('container')) {
            deviceCSS = '    max-width: 1200px;\\n';
          } else if (className.includes('title')) {
            deviceCSS = '    font-size: 2.5rem;\\n';
          }
        }
        
        if (deviceCSS) {
          responsiveCSS += \`  .\\${className} {\\n\\${deviceCSS}  }\\n\`;
          hasResponsiveRules = true;
        }
      });
      
      responsiveCSS += '}\\n\\n';
      
      // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –ø—Ä–∞–≤–∏–ª–∞
      if (hasResponsiveRules) {
        css += responsiveCSS;
      }
    });
    
    return css;
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'generateResponsiveCSS',
      issue: '–ü–æ—Ä–æ–∂–Ω—ñ responsive –ø—Ä–∞–≤–∏–ª–∞',
      fix: improvedResponsiveCSS,
      description: '–î–æ–¥–∞–Ω–æ —Ä–µ–∞–ª—å–Ω—ñ responsive —Å—Ç–∏–ª—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø—Ä–∞–≤–∏–ª'
    });
  }

  // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è dark mode CSS
  fixDarkModeCSS() {
    console.log('üîß –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è dark mode CSS...');
    
    const improvedDarkModeCSS = `
  generateDarkModeCSS(classes, config) {
    let css = '@media (prefers-color-scheme: dark) {\\n';
    css += '  :root {\\n';
    css += '    --bg-color: #1a1a1a;\\n';
    css += '    --text-color: #ffffff;\\n';
    css += '    --border-color: #333333;\\n';
    css += '    --accent-color: #4a9eff;\\n';
    css += '  }\\n\\n';
    
    let hasDarkRules = false;
    
    classes.forEach(className => {
      let darkCSS = '';
      
      if (className.includes('header')) {
        darkCSS = '    background: var(--bg-color);\\n    color: var(--text-color);\\n';
      } else if (className.includes('button') || className.includes('btn')) {
        darkCSS = '    background: var(--accent-color);\\n    color: var(--text-color);\\n';
      } else if (className.includes('text') || className.includes('title')) {
        darkCSS = '    color: var(--text-color);\\n';
      } else if (className.includes('container') || className.includes('section')) {
        darkCSS = '    background: var(--bg-color);\\n';
      }
      
      if (darkCSS) {
        css += \`  .\\${className} {\\n\\${darkCSS}  }\\n\`;
        hasDarkRules = true;
      }
    });
    
    css += '}\\n\\n';
    
    return hasDarkRules ? css : '';
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'generateDarkModeCSS',
      issue: '–ü–æ—Ä–æ–∂–Ω—ñ dark mode –ø—Ä–∞–≤–∏–ª–∞',
      fix: improvedDarkModeCSS,
      description: '–î–æ–¥–∞–Ω–æ —Ä–µ–∞–ª—å–Ω—ñ dark mode —Å—Ç–∏–ª—ñ –∑ CSS –∑–º—ñ–Ω–Ω–∏–º–∏'
    });
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
  createImprovedValidation() {
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó CSS...');
    
    const improvedValidation = `
  validateCSS(css) {
    const errors = [];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –¥—É–∂–æ–∫
    const openBraces = (css.match(/{/g) || []).length;
    const closeBraces = (css.match(/}/g) || []).length;
    
    if (openBraces !== closeBraces) {
      errors.push(\`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—É–∂–æ–∫: \\${openBraces} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö, \\${closeBraces} –∑–∞–∫—Ä–∏—Ç–∏—Ö\`);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –º—ñ–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ)
    if (css.includes('{}')) {
      errors.push('–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ CSS –ø—Ä–∞–≤–∏–ª–∞');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
    const rules = css.split('}').filter(rule => rule.trim() && rule.includes('{'));
    
    rules.forEach((rule, index) => {
      const [selector, declarations] = rule.split('{');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
      if (!selector || !selector.trim()) {
        errors.push(\`–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ –ø—Ä–∞–≤–∏–ª—ñ \\${index + 1}\`);
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ–π
      if (declarations) {
        const props = declarations.split(';').filter(p => p.trim() && !p.includes('/*'));
        
        props.forEach(prop => {
          if (prop.includes(':')) {
            const [property, value] = prop.split(':');
            if (!property.trim()) {
              errors.push(\`–ü–æ—Ä–æ–∂–Ω—è –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—ñ \\${index + 1}\`);
            }
            if (!value.trim()) {
              errors.push(\`–ü–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è \\${property.trim()} –≤ –ø—Ä–∞–≤–∏–ª—ñ \\${index + 1}\`);
            }
          }
        });
      }
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–¥—ñ–∞-–∑–∞–ø–∏—Ç—ñ–≤
    const mediaQueries = css.match(/@media[^{]+{[^}]*}/g) || [];
    mediaQueries.forEach((media, index) => {
      if (!media.includes('min-width') && !media.includes('max-width') && !media.includes('prefers-color-scheme')) {
        errors.push(\`–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –º–µ–¥—ñ–∞-–∑–∞–ø–∏—Ç \\${index + 1}: \\${media.substring(0, 50)}...\`);
      }
    });
    
    if (errors.length > 0) {
      throw new Error(errors.join('; '));
    }
    
    return true;
  }`;

    this.fixes.push({
      file: 'test-configurations.js',
      method: 'validateCSS',
      issue: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—è CSS',
      fix: improvedValidation,
      description: '–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É'
    });
  }

  // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
  async applyAllFixes() {
    console.log('üöÄ –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å...\n');
    
    this.fixEmptyRulesInMinification();
    this.fixMixedQuotesRegex();
    this.fixCSSGeneration();
    this.fixResponsiveCSS();
    this.fixDarkModeCSS();
    this.createImprovedValidation();
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
    const fixedConfigPath = path.join(__dirname, 'test-configurations-fixed.js');
    
    // –ß–∏—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
    const originalContent = fs.readFileSync(
      path.join(__dirname, 'test-configurations.js'), 
      'utf8'
    );
    
    let fixedContent = originalContent;
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    this.fixes.forEach(fix => {
      console.log(`‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: ${fix.issue}`);
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ –∑–∞–º—ñ–Ω—é—î–º–æ –º–µ—Ç–æ–¥
      const methodRegex = new RegExp(
        `(\\s*${fix.method}\\s*\\([^)]*\\)\\s*{[\\s\\S]*?^\\s*})`,
        'gm'
      );
      
      if (methodRegex.test(fixedContent)) {
        fixedContent = fixedContent.replace(methodRegex, fix.fix);
      } else {
        // –Ø–∫—â–æ –º–µ—Ç–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å –∫–ª–∞—Å—É
        const classEndRegex = /(\s*}\s*\/\/ –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)/;
        fixedContent = fixedContent.replace(classEndRegex, `\n${fix.fix}\n$1`);
      }
    });
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    fs.writeFileSync(fixedConfigPath, fixedContent);
    
    console.log(`\nüìÅ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${fixedConfigPath}`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    this.generateFixReport();
    
    return fixedConfigPath;
  }

  generateFixReport() {
    const reportPath = path.join(__dirname, 'test-output', 'fix-report.json');
    
    const report = {
      timestamp: new Date().toISOString(),
      totalFixes: this.fixes.length,
      fixes: this.fixes.map(fix => ({
        issue: fix.issue,
        description: fix.description,
        method: fix.method,
        file: fix.file
      }))
    };
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    const outputDir = path.dirname(reportPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`üìã –ó–≤—ñ—Ç –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${reportPath}`);
    
    // –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    console.log('\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨:');
    this.fixes.forEach((fix, index) => {
      console.log(`${index + 1}. ${fix.issue}`);
      console.log(`   ‚îî‚îÄ ${fix.description}`);
    });
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
if (require.main === module) {
  const fixer = new IssueFixer();
  fixer.applyAllFixes().then(fixedFile => {
    console.log(`\nüéâ –í—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`);
    console.log(`üìÅ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª: ${fixedFile}`);
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:');
    console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª');
    console.log('2. –ó–∞–º—ñ–Ω—ñ—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º');
    console.log('3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
  }).catch(console.error);
}

module.exports = { IssueFixer };