#!/usr/bin/env node

const { ConfigurationTester } = require('./test-configurations');
const { EdgeCaseTester } = require('./test-edge-cases');
const fs = require('fs');
const path = require('path');

class MasterTester {
  constructor() {
    this.startTime = Date.now();
    this.testResults = {
      configurations: null,
      edgeCases: null,
      summary: {}
    };
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CSS Classes from HTML Extension\n');
    console.log('=' .repeat(60));
    
    try {
      // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
      console.log('\nüìã –ï–¢–ê–ü 1: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π');
      console.log('-'.repeat(40));
      
      const configTester = new ConfigurationTester();
      await configTester.runAllTests();
      this.testResults.configurations = configTester.results;
      
      // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
      console.log('\nüß™ –ï–¢–ê–ü 2: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤');
      console.log('-'.repeat(40));
      
      const edgeTester = new EdgeCaseTester();
      await edgeTester.runAllTests();
      this.testResults.edgeCases = edgeTester.results;
      
      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
      this.generateMasterReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
      process.exit(1);
    }
  }

  generateMasterReport() {
    const endTime = Date.now();
    const totalDuration = endTime - this.startTime;
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
    console.log('='.repeat(60));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
    const configResults = this.testResults.configurations || [];
    const configPassed = configResults.filter(r => r.success).length;
    const configTotal = configResults.length;
    
    console.log(`\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π:`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${configPassed}`);
    console.log(`   ‚ùå –ù–µ–≤–¥–∞–ª–æ: ${configTotal - configPassed}`);
    console.log(`   üìä –í—Å—å–æ–≥–æ: ${configTotal}`);
    
    if (configTotal > 0) {
      const configPercentage = Math.round((configPassed / configTotal) * 100);
      console.log(`   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${configPercentage}%`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    const edgeResults = this.testResults.edgeCases || {};
    const edgePassed = (edgeResults.edgeCases || []).filter(r => r.passed).length +
                      (edgeResults.performance || []).filter(r => r.passed).length +
                      (edgeResults.validation || []).filter(r => r.passed).length;
    
    const edgeTotal = (edgeResults.edgeCases || []).length +
                     (edgeResults.performance || []).length +
                     (edgeResults.validation || []).length;
    
    console.log(`\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤:`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${edgePassed}`);
    console.log(`   ‚ùå –ù–µ–≤–¥–∞–ª–æ: ${edgeTotal - edgePassed}`);
    console.log(`   üìä –í—Å—å–æ–≥–æ: ${edgeTotal}`);
    
    if (edgeTotal > 0) {
      const edgePercentage = Math.round((edgePassed / edgeTotal) * 100);
      console.log(`   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${edgePercentage}%`);
    }
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalPassed = configPassed + edgePassed;
    const totalTests = configTotal + edgeTotal;
    const overallPercentage = totalTests > 0 ? Math.round((totalPassed / totalTests) * 100) : 0;
    
    console.log(`\nüéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: ${totalPassed}`);
    console.log(`   ‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö —Ç–µ—Å—Ç—ñ–≤: ${totalTests - totalPassed}`);
    console.log(`   üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${totalTests}`);
    console.log(`   üìà –ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${overallPercentage}%`);
    console.log(`   ‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${Math.round(totalDuration / 1000)}—Å`);
    
    // –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ
    this.displayQualityAssessment(overallPercentage);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    this.displayRecommendations(configResults, edgeResults);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É
    this.saveMasterReport(totalDuration, overallPercentage);
  }

  displayQualityAssessment(percentage) {
    console.log(`\nüèÜ –û–¶–Ü–ù–ö–ê –Ø–ö–û–°–¢–Ü:`);
    
    if (percentage >= 95) {
      console.log('   üåü –í–Ü–î–ú–Ü–ù–ù–û! –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.');
      console.log('   üéâ –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.');
    } else if (percentage >= 85) {
      console.log('   üëç –î–û–ë–†–ï! –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–µ.');
      console.log('   üîß –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏.');
    } else if (percentage >= 70) {
      console.log('   ‚ö†Ô∏è  –ó–ê–î–û–í–Ü–õ–¨–ù–û. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.');
      console.log('   üõ†Ô∏è  –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏.');
    } else {
      console.log('   ‚ùå –ù–ï–ó–ê–î–û–í–Ü–õ–¨–ù–û. –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏.');
      console.log('   üö® –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.');
    }
  }

  displayRecommendations(configResults, edgeResults) {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:`);
    
    const failedConfigs = configResults.filter(r => !r.success);
    if (failedConfigs.length > 0) {
      console.log(`   üîß –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏:`);
      failedConfigs.slice(0, 3).forEach(config => {
        console.log(`      - ${config.configName} + ${config.htmlFile}`);
      });
    }
    
    const failedEdgeCases = (edgeResults.edgeCases || []).filter(r => !r.passed);
    if (failedEdgeCases.length > 0) {
      console.log(`   üß™ –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤:`);
      failedEdgeCases.slice(0, 3).forEach(test => {
        console.log(`      - ${test.name}`);
      });
    }
    
    const slowPerformance = (edgeResults.performance || []).filter(r => !r.passed);
    if (slowPerformance.length > 0) {
      console.log(`   ‚ö° –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:`);
      slowPerformance.forEach(test => {
        console.log(`      - ${test.name}: ${test.duration}ms`);
      });
    }
    
    // –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    console.log(`   üìö –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:`);
    console.log(`      - –î–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ unit —Ç–µ—Å—Ç—ñ–≤`);
    console.log(`      - –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫`);
    console.log(`      - –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É`);
    console.log(`      - –î–æ–¥–∞—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ`);
  }

  saveMasterReport(duration, percentage) {
    const reportData = {
      timestamp: new Date().toISOString(),
      duration: duration,
      overallPercentage: percentage,
      configurations: this.testResults.configurations,
      edgeCases: this.testResults.edgeCases,
      summary: {
        totalTests: (this.testResults.configurations || []).length + 
                   ((this.testResults.edgeCases?.edgeCases || []).length +
                    (this.testResults.edgeCases?.performance || []).length +
                    (this.testResults.edgeCases?.validation || []).length),
        passedTests: (this.testResults.configurations || []).filter(r => r.success).length +
                    ((this.testResults.edgeCases?.edgeCases || []).filter(r => r.passed).length +
                     (this.testResults.edgeCases?.performance || []).filter(r => r.passed).length +
                     (this.testResults.edgeCases?.validation || []).filter(r => r.passed).length)
      }
    };
    
    const outputDir = path.join(__dirname, 'test-output');
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const reportPath = path.join(outputDir, 'master-test-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –∑–≤—ñ—Ç—É
    this.generateHTMLReport(reportData, outputDir);
    
    console.log(`\nüìã –ó–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:`);
    console.log(`   üìÑ JSON: ${reportPath}`);
    console.log(`   üåê HTML: ${path.join(outputDir, 'test-report.html')}`);
  }

  generateHTMLReport(data, outputDir) {
    const html = `
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ó–≤—ñ—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CSS Classes from HTML</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .success { color: #28a745; }
        .error { color: #dc3545; }
        .warning { color: #ffc107; }
        .info { color: #17a2b8; }
        .card { border: 1px solid #dee2e6; border-radius: 8px; padding: 15px; margin: 10px 0; }
        .progress { background: #e9ecef; border-radius: 4px; height: 20px; overflow: hidden; }
        .progress-bar { background: #28a745; height: 100%; transition: width 0.3s; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #dee2e6; padding: 8px; text-align: left; }
        th { background: #f8f9fa; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üß™ –ó–≤—ñ—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CSS Classes from HTML Extension</h1>
        <p><strong>–î–∞—Ç–∞:</strong> ${new Date(data.timestamp).toLocaleString('uk-UA')}</p>
        <p><strong>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</strong> ${Math.round(data.duration / 1000)}—Å</p>
        <p><strong>–ó–∞–≥–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:</strong> <span class="${data.overallPercentage >= 85 ? 'success' : data.overallPercentage >= 70 ? 'warning' : 'error'}">${data.overallPercentage}%</span></p>
        
        <div class="progress">
            <div class="progress-bar" style="width: ${data.overallPercentage}%"></div>
        </div>
    </div>

    <div class="card">
        <h2>üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <p><span class="success">‚úÖ –£—Å–ø—ñ—à–Ω–æ:</span> ${data.summary.passedTests}</p>
        <p><span class="error">‚ùå –ù–µ–≤–¥–∞–ª–æ:</span> ${data.summary.totalTests - data.summary.passedTests}</p>
        <p><span class="info">üìä –í—Å—å–æ–≥–æ:</span> ${data.summary.totalTests}</p>
    </div>

    <div class="card">
        <h2>üìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π</h2>
        <table>
            <thead>
                <tr>
                    <th>–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è</th>
                    <th>HTML —Ñ–∞–π–ª</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ß–∞—Å (–º—Å)</th>
                    <th>–ö–ª–∞—Å—ñ–≤</th>
                </tr>
            </thead>
            <tbody>
                ${(data.configurations || []).map(config => `
                    <tr>
                        <td>${config.configName}</td>
                        <td>${config.htmlFile}</td>
                        <td class="${config.success ? 'success' : 'error'}">${config.success ? '‚úÖ' : '‚ùå'}</td>
                        <td>${config.performance?.duration || 'N/A'}</td>
                        <td>${config.performance?.classCount || 'N/A'}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    </div>

    <div class="card">
        <h2>üß™ –ö—Ä–∞–π–Ω—ñ –≤–∏–ø–∞–¥–∫–∏</h2>
        <table>
            <thead>
                <tr>
                    <th>–¢–µ—Å—Ç</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–û—á—ñ–∫—É–≤–∞–Ω–æ</th>
                    <th>–û—Ç—Ä–∏–º–∞–Ω–æ</th>
                </tr>
            </thead>
            <tbody>
                ${(data.edgeCases?.edgeCases || []).map(test => `
                    <tr>
                        <td>${test.name}</td>
                        <td class="${test.passed ? 'success' : 'error'}">${test.passed ? '‚úÖ' : '‚ùå'}</td>
                        <td>${Array.isArray(test.expected) ? test.expected.join(', ') : test.expected}</td>
                        <td>${test.actualCount || (Array.isArray(test.actual) ? test.actual.join(', ') : test.actual)}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    </div>

    <div class="card">
        <h2>‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h2>
        <table>
            <thead>
                <tr>
                    <th>–¢–µ—Å—Ç</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ß–∞—Å (–º—Å)</th>
                    <th>–î–µ—Ç–∞–ª—ñ</th>
                </tr>
            </thead>
            <tbody>
                ${(data.edgeCases?.performance || []).map(test => `
                    <tr>
                        <td>${test.name}</td>
                        <td class="${test.passed ? 'success' : 'error'}">${test.passed ? '‚úÖ' : '‚ùå'}</td>
                        <td>${test.duration}</td>
                        <td>${test.classCount ? `–ö–ª–∞—Å—ñ–≤: ${test.classCount}` : ''}${test.outputSize ? `, –†–æ–∑–º—ñ—Ä: ${test.outputSize}` : ''}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    </div>

    <script>
        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        document.addEventListener('DOMContentLoaded', function() {
            console.log('–ó–≤—ñ—Ç —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        });
    </script>
</body>
</html>`;

    const htmlPath = path.join(outputDir, 'test-report.html');
    fs.writeFileSync(htmlPath, html);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
if (require.main === module) {
  const masterTester = new MasterTester();
  masterTester.runAllTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { MasterTester };