#!/usr/bin/env node

/**
 * Figma-HTML Integration System
 * –ì–æ–ª–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º–∏
 * @version 2.0.0
 */

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤
const FigmaAPIClient = require("./core/FigmaAPIClient");
const HTMLParser = require("./core/HTMLParser");
const StyleMatcher = require("./core/StyleMatcher");
const CSSGenerator = require("./core/CSSGenerator");
const HierarchyAnalyzer = require("./core/HierarchyAnalyzer");

const ContentAnalyzer = require("./analyzers/ContentAnalyzer");
const LayoutAnalyzer = require("./analyzers/LayoutAnalyzer");
const ResponsiveAnalyzer = require("./analyzers/ResponsiveAnalyzer");

const ModernCSSGenerator = require("./generators/ModernCSSGenerator");
const FlexboxGridGenerator = require("./generators/FlexboxGridGenerator");
const ContainerGenerator = require("./generators/ContainerGenerator");

const ValidationUtils = require("./utils/ValidationUtils");
const OptimizationUtils = require("./utils/OptimizationUtils");
const TestingUtils = require("./utils/TestingUtils");

const fs = require("fs");
const path = require("path");
require("dotenv").config();

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å —Å–∏—Å—Ç–µ–º–∏
 */
class FigmaHTMLIntegration {
  constructor(config = {}) {
    this.config = {
      figmaToken: config.figmaToken || process.env.FIGMA_API_TOKEN,
      outputDir: config.outputDir || process.env.OUTPUT_DIR || "./output",
      debug: config.debug || process.env.DEBUG === "true",
      ...config,
    };

    this.initializeModules();
    this.setupOutputDirectory();
  }

  initializeModules() {
    // Core –º–æ–¥—É–ª—ñ
    this.figmaClient = new FigmaAPIClient(this.config.figmaToken);
    this.htmlParser = new HTMLParser();
    this.styleMatcher = new StyleMatcher();
    this.cssGenerator = new CSSGenerator(this.config);
    this.hierarchyAnalyzer = new HierarchyAnalyzer();

    // Analyzers
    this.contentAnalyzer = new ContentAnalyzer();
    this.layoutAnalyzer = new LayoutAnalyzer();
    this.responsiveAnalyzer = new ResponsiveAnalyzer();

    // Generators
    this.modernCSSGenerator = new ModernCSSGenerator(this.config);
    this.flexboxGridGenerator = new FlexboxGridGenerator(this.config);
    this.containerGenerator = new ContainerGenerator(this.config);

    // Utils
    this.validator = new ValidationUtils(this.config);
    this.optimizer = new OptimizationUtils(this.config);
    this.tester = new TestingUtils(this.config);
  }

  setupOutputDirectory() {
    if (!fs.existsSync(this.config.outputDir)) {
      fs.mkdirSync(this.config.outputDir, { recursive: true });
    }
  }

  /**
   * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
   */
  async integrate(figmaFileKey, htmlContent, options = {}) {
    console.log("üöÄ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Figma-HTML...\n");

    try {
      // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Figma
      console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Figma...");
      const figmaData = await this.figmaClient.getFileStructure(figmaFileKey);
      console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${figmaData.hierarchy.size} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n`);

      // 2. –ü–∞—Ä—Å–∏–Ω–≥ HTML
      console.log("üîç –ê–Ω–∞–ª—ñ–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∏...");
      const htmlData = this.htmlParser.parseHTML(htmlContent);
      console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ${htmlData.hierarchy.size} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n`);

      // 3. –ê–Ω–∞–ª—ñ–∑ —ñ—î—Ä–∞—Ä—Ö—ñ–π
      console.log("üìä –ê–Ω–∞–ª—ñ–∑ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä...");
      const hierarchyComparison = this.hierarchyAnalyzer.compareHierarchies(
        figmaData.hierarchy,
        htmlData.hierarchy
      );
      console.log(
        `‚úÖ –°—Ö–æ–∂—ñ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä: ${(
          hierarchyComparison.overallSimilarity * 100
        ).toFixed(1)}%\n`
      );

      // 4. –°–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
      console.log("üéØ –°–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...");
      const matchedStyles = this.styleMatcher.matchStyles(figmaData, htmlData);
      console.log(`‚úÖ –°–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${matchedStyles.matches.size} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n`);

      // 5. –ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ –º–∞–∫–µ—Ç—ñ–≤
      console.log("üìù –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤...");
      await this.performDetailedAnalysis(figmaData, htmlData, matchedStyles);

      // 6. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CSS
      console.log("üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CSS —Å—Ç–∏–ª—ñ–≤...");
      const css = await this.generateCSS(matchedStyles, figmaData, htmlData);
      console.log("‚úÖ CSS —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ\n");

      // 7. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
      console.log("üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è...");
      const validated = this.validator.validateSystem({
        figmaData,
        htmlData,
        css,
        matches: matchedStyles,
      });
      const optimized = this.optimizer.optimizeSystem({
        css,
        html: htmlContent,
      });
      console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞\n");

      // 8. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      if (this.config.runTests !== false) {
        console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...");
        const testResults = await this.tester.runFullTestSuite(this);
        console.log(
          `‚úÖ –¢–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}/${
            testResults.passed + testResults.failed
          }\n`
        );
      }

      // 9. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...");
      await this.saveResults({
        css: optimized.css,
        matches: matchedStyles,
        analysis: hierarchyComparison,
        validation: validated,
        tests: this.config.runTests !== false ? testResults : null,
      });

      console.log("üéâ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");

      return {
        success: true,
        css: optimized.css,
        matches: matchedStyles,
        statistics: matchedStyles.statistics,
      };
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:", error);
      throw error;
    }
  }

  async performDetailedAnalysis(figmaData, htmlData, matchedStyles) {
    const analyses = new Map();

    matchedStyles.matches.forEach((match, figmaId) => {
      const figmaElement = figmaData.hierarchy.get(figmaId);
      const htmlElement = htmlData.hierarchy.get(match.htmlElement);

      analyses.set(figmaId, {
        content: this.contentAnalyzer.analyzeContent(figmaElement),
        layout: this.layoutAnalyzer.analyzeLayout(figmaElement),
        responsive: this.responsiveAnalyzer.analyzeResponsiveness(
          figmaElement,
          figmaData
        ),
      });
    });

    return analyses;
  }

  async generateCSS(matchedStyles, figmaData, htmlData) {
    // –ë–∞–∑–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è
    let css = this.cssGenerator.generateCSS(matchedStyles, figmaData, htmlData);

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—É—á–∞—Å–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
    const modernStyles = this.modernCSSGenerator.generateModernStyles(
      figmaData.hierarchy.values().next().value,
      {}
    );
    css += "\n\n" + this.modernCSSGenerator.compileToCSS(modernStyles);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    const containerSystem = this.containerGenerator.generateContainerSystem({
      maxWidth: 1200,
      padding: 20,
    });
    css += "\n\n" + this.containerGenerator.compileToCSS(containerSystem);

    return css;
  }

  async saveResults(results) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-");

    // CSS —Ñ–∞–π–ª
    fs.writeFileSync(
      path.join(this.config.outputDir, `styles_${timestamp}.css`),
      results.css,
      "utf8"
    );

    // –ó–≤—ñ—Ç —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
    fs.writeFileSync(
      path.join(this.config.outputDir, `matches_${timestamp}.json`),
      JSON.stringify(results.matches, null, 2),
      "utf8"
    );

    // –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
    fs.writeFileSync(
      path.join(this.config.outputDir, `report_${timestamp}.json`),
      JSON.stringify(
        {
          analysis: results.analysis,
          validation: results.validation,
          tests: results.tests,
          timestamp,
        },
        null,
        2
      ),
      "utf8"
    );
  }
}

// CLI —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const args = process.argv.slice(2);

  if (args.length < 2) {
    console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node main.js <figma-file-key> <html-file>");
    process.exit(1);
  }

  const figmaKey = args[0];
  const htmlFile = args[1];

  if (!fs.existsSync(htmlFile)) {
    console.error(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${htmlFile}`);
    process.exit(1);
  }

  const htmlContent = fs.readFileSync(htmlFile, "utf8");
  const integration = new FigmaHTMLIntegration();

  integration
    .integrate(figmaKey, htmlContent)
    .then((result) => {
      if (result.success) {
        console.log("\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        console.log(
          `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${result.statistics.matchPercentage.toFixed(
            1
          )}% —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–æ`
        );
      }
    })
    .catch((error) => {
      console.error("\n‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
      process.exit(1);
    });
}

module.exports = FigmaHTMLIntegration;
