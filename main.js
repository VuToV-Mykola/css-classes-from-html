/* !!! –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ Figma ‚Üí HTML/CSS !!! */
const FigmaAPIClient = require("./core/FigmaAPIClient")
const StyleMatcher = require("./core/StyleMatcher")
const CSSGenerator = require("./core/CSSGenerator")
const ModernCSSGenerator = require("./generators/ModernCSSGenerator")
const ContainerGenerator = require("./generators/ContainerGenerator")
const ValidationUtils = require("./utils/ValidationUtils")
const TestingUtils = require("./utils/TestingUtils")

class FigmaHTMLIntegration {
  constructor(config = {}) {
    this.config = config
    this.figmaClient = new FigmaAPIClient(config.token || process.env.FIGMA_TOKEN)
    this.styleMatcher = new StyleMatcher()
    this.cssGenerator = new CSSGenerator()
    this.modernCSSGenerator = new ModernCSSGenerator()
    this.containerGenerator = new ContainerGenerator({
      maxWidth: config.maxWidth || 1200,
      padding: config.padding || 20
    })
    this.validationUtils = new ValidationUtils()
    this.testingUtils = new TestingUtils()
  }

  /* --- –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó --- */
  async integrate(fileKey) {
    try {
      console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Figma...")
      const figmaData = await this.figmaClient.fetchFile(fileKey)

      console.log("üîç –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤...")
      const matchedStyles = this.styleMatcher.matchStyles(figmaData)

      console.log("üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML...")
      const htmlData = this.generateHTML(figmaData)

      console.log("üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CSS...")
      const css = await this.generateCSS(matchedStyles, figmaData, htmlData)

      console.log("üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è...")
      this.validationUtils.validateSystem(css, htmlData)

      console.log("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
      await this.testingUtils.runFullTestSuite(this, figmaData, htmlData)

      console.log("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
      return {html: htmlData, css}
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:", error)
      throw error
    }
  }

  /* --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML (—Å–ø—Ä–æ—â–µ–Ω–∞) --- */
  generateHTML(figmaData) {
    return `<div class="app-root">Figma project ${figmaData.name}</div>`
  }

  /* --- –Ñ–¥–∏–Ω–∏–π –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ generateCSS --- */
  async generateCSS(matchedStyles, figmaData, htmlData) {
    try {
      if (!matchedStyles || !figmaData || !htmlData) {
        throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —É generateCSS")
      }

      // ‚úÖ fallback –¥–ª—è hierarchy
      if (!figmaData.hierarchy) {
        console.warn("‚ö†Ô∏è –£ figmaData –Ω–µ–º–∞—î –ø–æ–ª—è hierarchy. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±‚Äô—î–∫—Ç.")
        figmaData.hierarchy = new Map()
      }

      // –ë–∞–∑–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è CSS
      let css = this.cssGenerator.generateCSS(matchedStyles, figmaData, htmlData)

      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—É—á–∞—Å–Ω—ñ —Å—Ç–∏–ª—ñ
      if (figmaData.hierarchy.size > 0) {
        const firstElement = figmaData.hierarchy.values().next().value
        const modernStyles = this.modernCSSGenerator.generateModernStyles(firstElement, {})
        css += "\n\n" + this.modernCSSGenerator.compileToCSS(modernStyles)
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
      const containerSystem = this.containerGenerator.generateContainerSystem({
        maxWidth: this.config.maxWidth || 1200,
        padding: this.config.padding || 20
      })

      // –î–æ–¥–∞—î–º–æ mixins –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      if (containerSystem.mixins) {
        let mixinsCSS = "\n/* Container Mixins */\n"
        Object.entries(containerSystem.mixins).forEach(([name, styles]) => {
          mixinsCSS += `.${name} {\n`
          Object.entries(styles).forEach(([prop, value]) => {
            const cssProp = prop.replace(/([A-Z])/g, "-$1").toLowerCase()
            mixinsCSS += `  ${cssProp}: ${value};\n`
          })
          mixinsCSS += "}\n\n"
        })
        css += mixinsCSS
      }

      // –î–æ–¥–∞—î–º–æ —ñ–Ω—à—É CSS —Å–∏—Å—Ç–µ–º—É
      css += "\n\n" + this.containerGenerator.compileToCSS(containerSystem)

      return css
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É generateCSS:", error.message)
      throw error
    }
  }
}

module.exports = FigmaHTMLIntegration

// --- –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ ---
if (require.main === module) {
  const integration = new FigmaHTMLIntegration({maxWidth: 1400})
  integration
    .integrate("FILE_KEY")
    .then(res => {
      console.log("‚úÖ HTML:", res.html)
      console.log("‚úÖ CSS:", res.css.substring(0, 300) + "...")
    })
    .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", err))
}
