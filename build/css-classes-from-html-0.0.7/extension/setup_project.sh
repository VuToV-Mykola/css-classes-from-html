#!/bin/bash

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
mkdir -p webview log

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ WebView
cat > webview/menu.html << 'EOF'
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
  <title>CSS Classes Menu</title>
</head>
<body>
  <div class="menu-container">
    <h2>CSS Classes Menu</h2>
    <button id="loadConfigBtn">Load Config</button>
    <button id="toggleThemeBtn">Toggle Theme</button>
    <pre id="config">Config will appear here...</pre>
  </div>

  <script>
    const vscode = acquireVsCodeApi();

    function sendMessage(type, payload) {
      vscode.postMessage({ type, payload });
    }

    window.addEventListener('message', event => {
      const message = event.data;
      switch (message.type) {
        case 'configData':
          document.getElementById('config').innerText = JSON.stringify(message.payload, null, 2);
          break;
        case 'log':
          console.log('Extension log:', message.payload);
          break;
        default:
          console.warn('Unknown message type', message.type);
      }
    });

    document.getElementById('loadConfigBtn').addEventListener('click', () => {
      sendMessage('requestConfig', {});
    });

    document.getElementById('toggleThemeBtn').addEventListener('click', () => {
      sendMessage('updateConfig', { theme: document.body.dataset.theme === 'light' ? 'dark' : 'light' });
      document.body.dataset.theme = document.body.dataset.theme === 'light' ? 'dark' : 'light';
    });
  </script>
</body>
</html>
EOF

cat > webview/style.css << 'EOF'
body {
  font-family: Arial, sans-serif;
  background-color: var(--bg-color, #fff);
  color: var(--text-color, #000);
  padding: 20px;
}

body[data-theme="dark"] {
  --bg-color: #1e1e1e;
  --text-color: #ddd;
}

.menu-container {
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 8px;
}

button {
  margin: 5px;
  padding: 8px 12px;
  cursor: pointer;
  border-radius: 5px;
}
EOF

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è VS Code
cat > extension.js << 'EOF'
const vscode = require('vscode');
const fs = require('fs');
const path = require('path');

let globalConfig = {
  theme: 'light',
  showAdvanced: false
};

function activate(context) {
  vscode.commands.registerCommand('css-classes.openMenu', () => {
    const panel = vscode.window.createWebviewPanel(
      'cssMenu',
      'CSS Classes Menu',
      vscode.ViewColumn.One,
      {
        enableScripts: true,
        localResourceRoots: [vscode.Uri.file(path.join(context.extensionPath, 'webview'))]
      }
    );

    const menuHtmlPath = path.join(context.extensionPath, 'webview', 'menu.html');
    panel.webview.html = fs.readFileSync(menuHtmlPath, 'utf8');

    panel.webview.onDidReceiveMessage(message => {
      switch(message.type) {
        case 'requestConfig':
          panel.webview.postMessage({ type: 'configData', payload: globalConfig });
          logMessage(`Sent config to WebView: ${JSON.stringify(globalConfig)}`);
          break;
        case 'updateConfig':
          globalConfig = { ...globalConfig, ...message.payload };
          logMessage(`Updated config: ${JSON.stringify(globalConfig)}`);
          break;
        default:
          logMessage(`Unknown message type: ${message.type}`);
      }
    });
  });
}

function logMessage(msg) {
  const logDir = path.join(__dirname, 'log');
  if (!fs.existsSync(logDir)) fs.mkdirSync(logDir);
  const logPath = path.join(logDir, 'webview.log');
  fs.appendFileSync(logPath, `${new Date().toISOString()} - ${msg}\n`);
}

function deactivate() {}

module.exports = { activate, deactivate };
EOF

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è bash-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
cat > test_menu.sh << 'EOF'
#!/bin/bash

mkdir -p log
echo "üìå –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ WebView –º–µ–Ω—é..." | tee -a log/test_log.txt

curl -s http://localhost:8000/webview/menu.html > /dev/null
echo "$(date): HTML –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" >> log/test_log.txt

echo "‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
EOF

chmod +x test_menu.sh

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
echo "‚úÖ –ü—Ä–æ—î–∫—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ./test_menu.sh"
EOF

---

### ‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è

1. **–ó–±–µ—Ä–µ–∂—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç**: –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª `setup_project.sh` —É –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –≤–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É.
2. **–ù–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è**: –í–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `chmod +x setup_project.sh` —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ.
3. **–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç**: –í–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `./setup_project.sh` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É.
4. **–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è**: –ü—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–∫—Ä–∏–ø—Ç–∞ `./test_menu.sh`.

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É—î –ø—Ä–æ—Ü–µ—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É –≤–∞—à–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å!
::contentReference[oaicite:0]{index=0}
 
