#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Figma API –∑'—î–¥–Ω–∞–Ω–Ω—è
 */

require('dotenv').config();

async function testFigmaAPI() {
    const token = process.env.FIGMA_API_TOKEN;
    
    if (!token) {
        console.error('‚ùå FIGMA_API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ');
        process.exit(1);
    }
    
    console.log('üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Figma API...');
    console.log(`üìù –¢–æ–∫–µ–Ω: ${token.substring(0, 10)}...`);
    
    // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const testFiles = [
        { key: 'Gz419qkOjPvKUuSgURTNP2', name: 'Original file' },
        { key: 'FILE_KEY', name: 'User file' }
    ];
    
    for (const file of testFiles) {
        try {
            const response = await fetch(`https://api.figma.com/v1/files/${file.key}`, {
                headers: {
                    'X-Figma-Token': token
                }
            });
            
            console.log(`\nüìÅ ${file.name} (${file.key}):`);
            console.log(`   Status: ${response.status} ${response.statusText}`);
            
            if (response.ok) {
                const data = await response.json();
                console.log(`   ‚úÖ –ù–∞–∑–≤–∞: ${data.name}`);
                console.log(`   üìÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastModified}`);
            } else {
                const error = await response.text();
                console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
            }
        } catch (err) {
            console.error(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: ${err.message}`);
        }
    }
}

testFigmaAPI();
