/**
 * Config Loader - –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
 */

const fs = require('fs').promises;
const path = require('path');

class ConfigLoader {
  constructor() {
    this.configPath = path.join(__dirname, '..', 'config');
    this.userConfigPath = path.join(__dirname, '..', '.vscode', 'css-classes-config');
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
   */
  async ensureConfigDir() {
    try {
      await fs.mkdir(this.userConfigPath, { recursive: true });
      await fs.mkdir(this.configPath, { recursive: true });
    } catch (error) {
      console.warn('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:', error.message);
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  async saveLastSettings(settings) {
    await this.ensureConfigDir();

    try {
      const settingsPath = path.join(this.userConfigPath, 'last-settings.json');
      
      const dataToSave = {
        ...settings,
        savedAt: new Date().toISOString(),
        version: "2.1.0"
      };
      
      await fs.writeFile(settingsPath, JSON.stringify(dataToSave, null, 2), 'utf8');
      return true;
    } catch (error) {
      console.warn('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  async loadLastSettings() {
    try {
      const settingsPath = path.join(this.userConfigPath, 'last-settings.json');
      const content = await fs.readFile(settingsPath, 'utf8');
      const data = JSON.parse(content);
      
      if (data.version && data.version !== "2.1.0") {
        console.warn('–ù–µ—Å—É–º—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å');
        return null;
      }
      
      return data;
    } catch (error) {
      return null;
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø—Ä–µ—Å–µ—Ç—É
   */
  async saveUserPreset(name, settings) {
    await this.ensureConfigDir();

    try {
      const presetsPath = path.join(this.userConfigPath, 'user-presets.json');
      
      let userPresets = {};
      try {
        const content = await fs.readFile(presetsPath, 'utf8');
        userPresets = JSON.parse(content);
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î
      }
      
      userPresets[name] = {
        ...settings,
        savedAt: new Date().toISOString(),
        version: "2.1.0"
      };
      
      await fs.writeFile(presetsPath, JSON.stringify(userPresets, null, 2), 'utf8');
      return true;
    } catch (error) {
      console.warn('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É:', error.message);
      return false;
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤
   */
  async loadUserPresets() {
    try {
      const presetsPath = path.join(this.userConfigPath, 'user-presets.json');
      const content = await fs.readFile(presetsPath, 'utf8');
      return JSON.parse(content);
    } catch (error) {
      return {};
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  async cleanupOldSettings() {
    try {
      const settingsPath = path.join(this.userConfigPath, 'last-settings.json');
      await fs.unlink(settingsPath);
      console.log('üóëÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î
    }
  }
}

module.exports = ConfigLoader;
