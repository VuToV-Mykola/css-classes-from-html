/* !!! –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞–º–∏ !!! */
const vscode = require("vscode")
const ConfigLoader = require('./configLoader')

class ConfigurationManager {
  constructor() {
    this.config = vscode.workspace.getConfiguration("cssclasssfromhtml")
    this.configLoader = new ConfigLoader()
    this.lastUsedSettings = null
  }

  /* !!! –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ –ø—Ä–µ—Å–µ—Ç–∞–º–∏ !!! */
  async showConfigurationDialog() {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏ –∑ —Ñ–∞–π–ª—É
    const presets = await this.configLoader.loadPresets()
    const userPresets = await this.configLoader.loadUserPresets()
    const lastSettings = await this.configLoader.loadLastSettings()
    
    const options = []
    
    // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø—Ä–µ—Å–µ—Ç–∏
    for (const [key, preset] of Object.entries(presets)) {
      options.push({
        label: `${preset.icon} ${preset.name}`,
        description: preset.description,
        detail: this.getPresetDetails(preset.settings),
        preset: key
      })
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –ø—Ä–µ—Å–µ—Ç–∏
    for (const [name, preset] of Object.entries(userPresets)) {
      options.push({
        label: `$(star) ${name}`,
        description: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø—Ä–µ—Å–µ—Ç",
        detail: `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.formatSafeDate(preset.savedAt)}`,
        preset: "user",
        userPreset: name,
        settings: preset
      })
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if (lastSettings) {
      options.unshift({
        label: "$(history) –û—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        description: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
        detail: `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.formatSafeDate(lastSettings.savedAt)}`,
        preset: "last",
        settings: lastSettings
      })
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    options.push({
      label: "$(settings-gear) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
      description: "–í–ª–∞—Å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
      detail: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
      preset: "custom"
    })

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSS",
      ignoreFocusOut: true,
      title: "üéâ CSS Classes from HTML - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"
    })

    if (!selected) {
      return null // –°–∫–∞—Å–æ–≤–∞–Ω–æ
    }

    let config
    if (selected.preset === "last" || selected.preset === "user") {
      config = selected.settings
    } else {
      config = await this.applyPreset(selected.preset)
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if (config) {
      this.lastUsedSettings = config
      await this.configLoader.saveLastSettings(config)
    }
    
    return config
  }

  /* !!! –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É !!! */
  async applyPreset(preset) {
    if (preset === 'custom') {
      return await this.handleCustomConfiguration()
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏ –∑ —Ñ–∞–π–ª—É
    const presets = await this.configLoader.loadPresets()
    const presetConfig = presets[preset]
    
    if (presetConfig) {
      vscode.window.showInformationMessage(`‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: ${presetConfig.name}`)
      return presetConfig.settings
    }

    // –Ø–∫—â–æ –ø—Ä–µ—Å–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const defaults = await this.configLoader.loadDefaults()
    return defaults
  }

  /* !!! –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó !!! */
  async handleCustomConfiguration() {
    const options = [
      {
        label: "$(file-add) –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
        description: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—Ä—É—á–Ω—É",
        action: "create"
      },
      {
        label: "$(folder-opened) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É",
        description: "–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
        action: "import"
      },
      {
        label: "$(list-selection) –í–∏–±—Ä–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
        description: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ä–∞–Ω—ñ—à–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
        action: "select"
      }
    ]

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
      ignoreFocusOut: true
    })

    if (!selected) return this.getSavedConfiguration()

    switch (selected.action) {
      case "create":
        return await this.createCustomConfiguration()
      case "import":
        return await this.importCustomConfiguration()
      case "select":
        return await this.selectSavedPreset()
      default:
        return await this.getSavedConfiguration()
    }
  }

  /* !!! –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó !!! */
  async createCustomConfiguration() {
    const customConfig = {
      includeGlobal: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ?", true),
      includeReset: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ CSS reset?", true),
      includeComments: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ?", true),
      optimizeCSS: await this.askBoolean("–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ CSS?", true),
      saveFigmaStyles: await this.askBoolean("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ Figma —Å—Ç–∏–ª—ñ?", false),
      responsive: await this.askBoolean("–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω?", true),
      darkMode: await this.askBoolean("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏?", true),
      cssVariables: await this.askBoolean("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CSS –∑–º—ñ–Ω–Ω—ñ?", true),
      minify: await this.askBoolean("–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ CSS?", false)
    }

    const saveName = await vscode.window.showInputBox({
      prompt: "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
      placeHolder: "–ú–æ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"
    })

    if (saveName) {
      await this.savePreset(saveName, customConfig)
    }

    return customConfig
  }

  /* !!! –í–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç—É !!! */
  async selectSavedPreset() {
    const userPresets = await this.configLoader.loadUserPresets()
    const presetNames = Object.keys(userPresets)
    
    if (presetNames.length === 0) {
      vscode.window.showInformationMessage("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤")
      return await this.getSavedConfiguration()
    }

    const options = presetNames.map(name => ({
      label: name,
      description: userPresets[name].savedAt ? `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.formatSafeDate(userPresets[name].savedAt)}` : "",
      preset: userPresets[name]
    }))

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
      ignoreFocusOut: true
    })

    return selected ? selected.preset : this.getSavedConfiguration()
  }

  /* !!! –Ü–º–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó !!! */
  async importCustomConfiguration() {
    const fileUri = await vscode.window.showOpenDialog({
      canSelectFiles: true,
      canSelectFolders: false,
      canSelectMany: false,
      filters: {
        'JSON files': ['json']
      }
    })

    if (fileUri && fileUri[0]) {
      try {
        const fs = require('fs').promises
        const content = await fs.readFile(fileUri[0].fsPath, 'utf8')
        const config = JSON.parse(content)
        
        vscode.window.showInformationMessage("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
        return config
      } catch (error) {
        vscode.window.showErrorMessage(`–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ${error.message}`)
      }
    }
    
    return this.getSavedConfiguration()
  }

  /* !!! –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–µ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å !!! */
  async askBoolean(question, defaultValue) {
    const options = [
      { label: "–¢–∞–∫", value: true },
      { label: "–ù—ñ", value: false }
    ]

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: question,
      ignoreFocusOut: true
    })

    return selected ? selected.value : defaultValue
  }

  /* !!! –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —è–∫ –ø—Ä–µ—Å–µ—Ç !!! */
  async savePreset(name, configuration) {
    const success = await this.configLoader.saveUserPreset(name, configuration)
    
    if (success) {
      vscode.window.showInformationMessage(`–ü—Ä–µ—Å–µ—Ç "${name}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`)
    } else {
      vscode.window.showErrorMessage(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É "${name}"`)
    }
  }

  /* !!! –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É !!! */
  async loadPreset(name) {
    const userPresets = await this.configLoader.loadUserPresets()
    const preset = userPresets[name]
    
    if (!preset) {
      vscode.window.showErrorMessage(`–ü—Ä–µ—Å–µ—Ç "${name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`)
      return null
    }

    return preset
  }

  /* !!! –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤ !!! */
  async getAvailablePresets() {
    const userPresets = await this.configLoader.loadUserPresets()
    return Object.keys(userPresets).map(name => ({
      label: name,
      description: userPresets[name].savedAt ? `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.formatSafeDate(userPresets[name].savedAt)}` : "",
      preset: userPresets[name]
    }))
  }

  /* !!! –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É !!! */
  async deletePreset(name) {
    const success = await this.configLoader.deleteUserPreset(name)
    
    if (success) {
      vscode.window.showInformationMessage(`–ü—Ä–µ—Å–µ—Ç "${name}" –≤–∏–¥–∞–ª–µ–Ω–æ!`)
    } else {
      vscode.window.showErrorMessage(`–ü—Ä–µ—Å–µ—Ç "${name}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`)
    }
    
    return success
  }

  /* !!! –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –≤–∏–±–æ—Ä—É –ø—Ä–µ—Å–µ—Ç—É !!! */
  async showPresetSelector() {
    const userPresets = await this.configLoader.loadUserPresets()
    const presetNames = Object.keys(userPresets)
    
    const options = [
      { label: "$(gear) –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–µ—Å–µ—Ç", description: "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é", action: "create" }
    ]
    
    if (presetNames.length > 0) {
      options.push({ label: "$(trash) –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç", description: "–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–µ—Å–µ—Ç", action: "delete" })
      
      options.push(...presetNames.map(name => ({
        label: name,
        description: userPresets[name].savedAt ? `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${this.formatSafeDate(userPresets[name].savedAt)}` : "",
        preset: userPresets[name],
        action: "load"
      })))
    } else {
      vscode.window.showInformationMessage("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤")
    }

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –ø—Ä–µ—Å–µ—Ç–∞–º–∏",
      ignoreFocusOut: true
    })

    return selected || { action: "cancel" }
  }

  /* !!! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó !!! */
  async autoSaveConfiguration(configuration) {
    const autoSave = this.config.get("autoSaveConfiguration", true)
    
    if (autoSave) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConfigLoader –∑–∞–º—ñ—Å—Ç—å VS Code API
      await this.configLoader.saveLastSettings(configuration)
    }
  }

  /* !!! –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó !!! */
  async getSavedConfiguration() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConfigLoader –∑–∞–º—ñ—Å—Ç—å VS Code API
    const lastSettings = await this.configLoader.loadLastSettings()
    return lastSettings || {}
  }

  /* !!! –°–∫–∏–¥–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º !!! */
  async resetToDefaults() {
    const defaultConfig = {
      includeGlobal: true,
      includeReset: true,
      responsive: true,
      darkMode: true,
      saveFigmaStyles: true,
      optimizeCSS: true,
      removeRedundant: true,
      optimizeShorthands: true,
      optimizeInheritance: true,
      removeEmptyRules: true,
      colorFormat: "hex",
      cssVariables: true,
      includeComments: true,
      sortProperties: true,
      commentStyle: "author"
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConfigLoader –∑–∞–º—ñ—Å—Ç—å VS Code API
    await this.configLoader.saveLastSettings(defaultConfig)
    vscode.window.showInformationMessage("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∫–∏–Ω—É—Ç–æ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
    return defaultConfig
  }

  /* !!! –ï–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ JSON !!! */
  async exportConfiguration() {
    const lastSettings = await this.configLoader.loadLastSettings()
    const userPresets = await this.configLoader.loadUserPresets()
    
    const exportData = {
      version: "0.0.6",
      exportedAt: new Date().toISOString(),
      lastConfiguration: lastSettings || {},
      userPresets: userPresets
    }

    const jsonString = JSON.stringify(exportData, null, 2)
    
    const doc = await vscode.workspace.openTextDocument({
      content: jsonString,
      language: "json"
    })
    
    await vscode.window.showTextDocument(doc)
    vscode.window.showInformationMessage("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
  }

  /* !!! –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ JSON !!! */
  async importConfiguration(jsonString) {
    try {
      const importData = JSON.parse(jsonString)
      
      if (importData.lastConfiguration) {
        await this.configLoader.saveLastSettings(importData.lastConfiguration)
      }
      
      if (importData.userPresets) {
        for (const [name, preset] of Object.entries(importData.userPresets)) {
          await this.configLoader.saveUserPreset(name, preset)
        }
      }
      
      // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
      if (importData.currentConfiguration) {
        await this.configLoader.saveLastSettings(importData.currentConfiguration)
      }
      
      if (importData.presets) {
        for (const [name, preset] of Object.entries(importData.presets)) {
          await this.configLoader.saveUserPreset(name, preset)
        }
      }
      
      vscode.window.showInformationMessage("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
      return true
    } catch (error) {
      vscode.window.showErrorMessage(`–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: ${error.message}`)
      return false
    }
  }

  /* !!! –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ !!! */
  formatSafeDate(dateString) {
    try {
      return new Date(dateString).toLocaleDateString()
    } catch (error) {
      return '–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞'
    }
  }

  /* !!! –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ—Å–µ—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è !!! */
  getPresetDetails(settings) {
    const features = []
    
    if (settings.includeGlobal) features.push('Global')
    if (settings.includeReset) features.push('Reset')
    if (settings.responsive) features.push('Responsive')
    if (settings.darkMode) features.push('Dark Mode')
    if (settings.saveFigmaStyles) features.push('Figma')
    if (settings.optimizeCSS) features.push('Optimized')
    if (settings.minify) features.push('Minified')
    if (settings.minimal) features.push('Minimal')
    
    return features.join(', ') || 'Basic'
  }

  /* !!! –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  async getLastUsedSettings() {
    if (this.lastUsedSettings) {
      return this.lastUsedSettings
    }
    
    return await this.configLoader.loadLastSettings()
  }

  /* !!! –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  clearLastUsedSettings() {
    this.lastUsedSettings = null
  }

  /* !!! –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  async initialize() {
    await this.configLoader.cleanupOldSettings()
  }
}

module.exports = ConfigurationManager