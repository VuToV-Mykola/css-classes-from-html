// –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ configurationManager.js –∑ 3 —Ä–µ–∂–∏–º–∞–º–∏
const vscode = require("vscode");
const ConfigLoader = require('./configLoader');

class ConfigurationManager {
      constructor() {
    this.config = vscode.workspace.getConfiguration("cssclasssfromhtml")
    this.configLoader = new ConfigLoader()
    this.lastUsedSettings = null
    this.lastSelectedMode = null
    this.lastSelectedCanvas = []
    this.lastSelectedLayers = []
  }

  /* !!! –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó - 3 —Ä–µ–∂–∏–º–∏ !!! */
  async showConfigurationDialog() {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    const lastSettings = await this.configLoader.loadLastSettings()
    
    const options = [
      {
        label: "$(symbol-class) –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        description: "–¢—ñ–ª—å–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª–∞—Å—ñ–≤",
        detail: "–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç ‚Ä¢ –ë–µ–∑ Figma ‚Ä¢ –ë–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π",
        mode: "minimal",
        icon: "‚ö°"
      },
      {
        label: "$(rocket) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
        description: "–ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Figma —Ç–∞ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
        detail: "Figma —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ‚Ä¢ Canvas/Layers ‚Ä¢ ML matching ‚Ä¢ –í—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        mode: "maximum",
        icon: "üöÄ"
      },
      {
        label: "$(package) –ü—Ä–æ–¥–∞–∫—Ç",
        description: "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π CSS –¥–ª—è production",
        detail: "–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è ‚Ä¢ –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ‚Ä¢ Canvas/Layers ‚Ä¢ Production-ready",
        mode: "production",
        icon: "üì¶"
      }
    ]

    // –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
    if (lastSettings?.mode) {
      options.forEach(opt => {
        if (opt.mode === lastSettings.mode) {
          opt.label += " ‚≠ê"
          opt.description += " (–æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä)"
        }
      })
    }

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSS",
      ignoreFocusOut: true,
      title: "üé® CSS Classes from HTML - –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏"
    })

    if (!selected) return null

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ–∂–∏–º
    this.lastSelectedMode = selected.mode

    let config = await this.applyMode(selected.mode)
    
    // –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –ø—Ä–æ–¥–∞–∫—Ç —Ä–µ–∂–∏–º—ñ–≤ - –≤–∏–±—ñ—Ä Canvas —Ç–∞ Layers
    if (selected.mode !== 'minimal') {
      const canvasAndLayers = await this.selectCanvasAndLayers()
      if (canvasAndLayers) {
        config.selectedCanvas = canvasAndLayers.canvas
        config.selectedLayers = canvasAndLayers.layers
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä
        this.lastSelectedCanvas = canvasAndLayers.canvas
        this.lastSelectedLayers = canvasAndLayers.layers
      }
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    config.mode = selected.mode
    config.timestamp = new Date().toISOString()
    
    await this.configLoader.saveLastSettings(config)
    this.lastUsedSettings = config
    
    return config
  }

  /* !!! –í–∏–±—ñ—Ä Canvas —Ç–∞ Layers !!! */
  async selectCanvasAndLayers() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Figma –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const figmaLink = this.config.get("lastFigmaLink", "")
    
    if (!figmaLink) {
      const input = await vscode.window.showInputBox({
        prompt: "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Figma –º–∞–∫–µ—Ç",
        placeHolder: "https://www.figma.com/file/...",
        ignoreFocusOut: true
      })
      
      if (!input) return null
      
      await this.config.update("lastFigmaLink", input, vscode.ConfigurationTarget.Global)
    }

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–±–æ—Ä—É Canvas (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó - –∑–∞–ø–∏—Ç –¥–æ Figma API)
    const canvasOptions = [
      { label: "üé® Desktop", value: "desktop", picked: this.lastSelectedCanvas.includes("desktop") },
      { label: "üì± Mobile", value: "mobile", picked: this.lastSelectedCanvas.includes("mobile") },
      { label: "üìã Tablet", value: "tablet", picked: this.lastSelectedCanvas.includes("tablet") },
      { label: "üß© Components", value: "components", picked: this.lastSelectedCanvas.includes("components") },
      { label: "üéØ All Canvas", value: "all", picked: this.lastSelectedCanvas.includes("all") }
    ]

    const selectedCanvas = await vscode.window.showQuickPick(canvasOptions, {
      placeHolder: `–í–∏–±–µ—Ä—ñ—Ç—å Canvas (–æ—Å—Ç–∞–Ω–Ω—ñ: ${this.lastSelectedCanvas.join(', ') || '–Ω–µ –≤–∏–±—Ä–∞–Ω–æ'})`,
      canPickMany: true,
      ignoreFocusOut: true
    })

    if (!selectedCanvas || selectedCanvas.length === 0) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
      if (this.lastSelectedCanvas.length > 0) {
        vscode.window.showInformationMessage(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä Canvas: ${this.lastSelectedCanvas.join(', ')}`)
      }
    }

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–±–æ—Ä—É Layers
    const layerOptions = [
      { label: "üìê Layout", value: "layout", picked: this.lastSelectedLayers.includes("layout") },
      { label: "üé® Styles", value: "styles", picked: this.lastSelectedLayers.includes("styles") },
      { label: "üî§ Typography", value: "typography", picked: this.lastSelectedLayers.includes("typography") },
      { label: "üñºÔ∏è Images", value: "images", picked: this.lastSelectedLayers.includes("images") },
      { label: "üîò Components", value: "components", picked: this.lastSelectedLayers.includes("components") },
      { label: "‚ú® Effects", value: "effects", picked: this.lastSelectedLayers.includes("effects") },
      { label: "üì¶ All Layers", value: "all", picked: this.lastSelectedLayers.includes("all") }
    ]

    const selectedLayers = await vscode.window.showQuickPick(layerOptions, {
      placeHolder: `–í–∏–±–µ—Ä—ñ—Ç—å Layers (–æ—Å—Ç–∞–Ω–Ω—ñ: ${this.lastSelectedLayers.join(', ') || '–Ω–µ –≤–∏–±—Ä–∞–Ω–æ'})`,
      canPickMany: true,
      ignoreFocusOut: true
    })

    if (!selectedLayers || selectedLayers.length === 0) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
      if (this.lastSelectedLayers.length > 0) {
        vscode.window.showInformationMessage(`–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä Layers: ${this.lastSelectedLayers.join(', ')}`)
      }
    }

    return {
      canvas: selectedCanvas ? selectedCanvas.map(c => c.value) : this.lastSelectedCanvas,
      layers: selectedLayers ? selectedLayers.map(l => l.value) : this.lastSelectedLayers
    }
  }

  /* !!! –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É !!! */
  async applyMode(mode) {
    const configs = {
      minimal: {
        includeGlobal: false,
        includeReset: false,
        includeComments: false,
        commentStyle: "standard",
        optimizeCSS: false,
        saveFigmaStyles: false,
        responsive: false,
        darkMode: false,
        cssVariables: false,
        minify: false,
        skipFigmaInput: true,
        minimal: true,
        enableInspection: false,
        enableHierarchyAnalysis: false,
        enableMLMatching: false
      },
      maximum: {
        includeGlobal: true,
        includeReset: true,
        includeComments: true,
        commentStyle: "author",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: true,
        cssVariables: true,
        minify: false,
        skipFigmaInput: false,
        minimal: false,
        enableInspection: true,
        enableHierarchyAnalysis: true,
        enableMLMatching: true,
        matchingStrategies: ["all"],
        confidenceThreshold: 0.8
      },
      production: {
        includeGlobal: true,
        includeReset: true,
        includeComments: false,
        commentStyle: "none",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: false,
        cssVariables: true,
        minify: true,
        removeRedundant: true,
        removeEmptyRules: true,
        skipFigmaInput: false,
        minimal: false,
        enableInspection: true,
        enableHierarchyAnalysis: true,
        enableMLMatching: true,
        matchingStrategies: ["content", "structural", "ml"],
        confidenceThreshold: 0.9
      }
    }

    const config = configs[mode] || configs.minimal
    
    vscode.window.showInformationMessage(`‚úÖ –†–µ–∂–∏–º "${mode}" –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!`)
    
    return config
  }

  /* !!! –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  async loadLastSettings() {
    const saved = await this.configLoader.loadLastSettings()
    
    if (saved) {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –≤–∏–±–æ—Ä–∏
      this.lastSelectedMode = saved.mode
      this.lastSelectedCanvas = saved.selectedCanvas || []
      this.lastSelectedLayers = saved.selectedLayers || []
      
      vscode.window.showInformationMessage(
        `üìÇ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: ${saved.mode} —Ä–µ–∂–∏–º`
      )
    }
    
    return saved
  }

  /* !!! –û—á–∏—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  async clearSettings() {
    this.lastSelectedMode = null
    this.lastSelectedCanvas = []
    this.lastSelectedLayers = []
    this.lastUsedSettings = null
    
    await this.configLoader.cleanupOldSettings()
    
    vscode.window.showInformationMessage("üóëÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–æ")
  }

  /* !!! –ï–∫—Å–ø–æ—Ä—Ç –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å !!! */
  async exportSettings() {
    const settings = {
      mode: this.lastSelectedMode,
      canvas: this.lastSelectedCanvas,
      layers: this.lastSelectedLayers,
      config: this.lastUsedSettings,
      exportedAt: new Date().toISOString()
    }

    const jsonString = JSON.stringify(settings, null, 2)
    
    const doc = await vscode.workspace.openTextDocument({
      content: jsonString,
      language: "json"
    })
    
    await vscode.window.showTextDocument(doc)
    
    vscode.window.showInformationMessage("üì§ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    
    return settings
  }
}

module.exports = ConfigurationManager;
