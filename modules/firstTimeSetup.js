/* !!! –ú–æ–¥—É–ª—å –ø–µ—Ä—à–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è !!! */
const vscode = require("vscode")

class FirstTimeSetup {
  constructor() {
    this.config = vscode.workspace.getConfiguration("cssclasssfromhtml")
  }

  async showFirstTimeDialog() {
    const isFirstTime = !this.config.get("hasShownFirstTimeSetup", false)
    const forceShow = this.config.get("forceFirstTimeSetup", false)
    
    if (!isFirstTime && !forceShow) {
      return null
    }
    
    // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∏–º—É—Å–æ–≤–∏–π –ø–æ–∫–∞–∑ –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    if (forceShow) {
      await this.config.update("forceFirstTimeSetup", false, vscode.ConfigurationTarget.Global)
    }

    const options = [
      {
        label: "$(symbol-class) –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ",
        description: "–ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—ñ–≤ –∑ –ø—É—Å—Ç–∏–º–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏",
        detail: "–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å",
        preset: "minimal"
      },
      {
        label: "$(gear) –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ", 
        description: "–í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ Figma —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó",
        detail: "–ü–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏",
        preset: "standard"
      },
      {
        label: "$(rocket) –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ",
        description: "–í—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∫–ª—é—á–Ω–æ –∑ Figma",
        detail: "–ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–æ—é",
        preset: "maximum"
      },
      {
        label: "$(package) –ü—Ä–æ–¥–∞–∫—à–Ω",
        description: "–ú—ñ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π CSS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω—É",
        detail: "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤",
        preset: "production"
      },
      {
        label: "$(settings-gear) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
        description: "–í–ª–∞—Å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è",
        detail: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        preset: "custom"
      }
    ]

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CSS Classes from HTML",
      ignoreFocusOut: true,
      title: "üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ CSS Classes from HTML!"
    })

    if (selected) {
      await this.applyPreset(selected.preset)
      await this.config.update("hasShownFirstTimeSetup", true, vscode.ConfigurationTarget.Global)
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π
      const savePreset = this.config.get("savePresetConfiguration", true)
      if (savePreset) {
        await this.config.update("lastSelectedPreset", selected.preset, vscode.ConfigurationTarget.Global)
      }
      
      vscode.window.showInformationMessage(
        `‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è "${selected.label}" –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Ctrl+Shift+H –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó CSS.`
      )
    }

    return selected?.preset || null
  }

  async applyPreset(preset) {
    const presets = {
      minimal: {
        includeGlobal: false,
        includeReset: false,
        includeComments: true,
        commentStyle: "author",
        optimizeCSS: false,
        saveFigmaStyles: false,
        responsive: false,
        darkMode: false,
        cssVariables: false,
        minify: false,
        skipFigmaInput: true,
        minimal: true,
        showConfigurationDialog: false
      },
      standard: {
        includeGlobal: true,
        includeReset: true,
        includeComments: true,
        commentStyle: "author",
        optimizeCSS: true,
        saveFigmaStyles: false,
        responsive: true,
        darkMode: true,
        cssVariables: true,
        minify: false,
        skipFigmaInput: true,
        minimal: false,
        showConfigurationDialog: false
      },
      maximum: {
        includeGlobal: true,
        includeReset: true,
        includeComments: true,
        commentStyle: "author",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: true,
        cssVariables: true,
        minify: false,
        enableInspection: true,
        skipFigmaInput: false,
        minimal: false,
        showConfigurationDialog: false
      },
      production: {
        includeGlobal: true,
        includeReset: true,
        includeComments: false,
        commentStyle: "standard",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: false,
        cssVariables: false,
        minify: true,
        removeRedundant: true,
        removeEmptyRules: true,
        enableInspection: true,
        skipFigmaInput: false,
        minimal: false,
        showConfigurationDialog: false
      }
    }

    if (preset === 'custom') {
      return await this.handleCustomConfiguration()
    }

    const config = presets[preset]
    if (config) {
      for (const [key, value] of Object.entries(config)) {
        await this.config.update(key, value, vscode.ConfigurationTarget.Global)
      }
    }
  }

  async handleCustomConfiguration() {
    const options = [
      {
        label: "$(file-add) –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
        description: "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—Ä—É—á–Ω—É",
        action: "create"
      },
      {
        label: "$(folder-opened) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É",
        description: "–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é",
        action: "import"
      },
      {
        label: "$(list-selection) –í–∏–±—Ä–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
        description: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ä–∞–Ω—ñ—à–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
        action: "select"
      }
    ]

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
      ignoreFocusOut: true
    })

    if (!selected) return

    switch (selected.action) {
      case "create":
        return await this.createCustomConfiguration()
      case "import":
        return await this.importCustomConfiguration()
      case "select":
        return await this.selectSavedPreset()
    }
  }

  async createCustomConfiguration() {
    const customConfig = {
      includeGlobal: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ?", true),
      includeReset: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ CSS reset?", true),
      includeComments: await this.askBoolean("–í–∫–ª—é—á–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ?", true),
      optimizeCSS: await this.askBoolean("–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ CSS?", true),
      saveFigmaStyles: await this.askBoolean("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ Figma —Å—Ç–∏–ª—ñ?", false),
      responsive: await this.askBoolean("–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω?", true),
      darkMode: await this.askBoolean("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏?", true),
      cssVariables: await this.askBoolean("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ CSS –∑–º—ñ–Ω–Ω—ñ?", true),
      minify: await this.askBoolean("–ú—ñ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ CSS?", false)
    }

    const saveName = await vscode.window.showInputBox({
      prompt: "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
      placeHolder: "–ú–æ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"
    })

    if (saveName) {
      const presets = this.config.get("configurationPresets", {})
      presets[saveName] = customConfig
      await this.config.update("configurationPresets", presets, vscode.ConfigurationTarget.Global)
    }

    for (const [key, value] of Object.entries(customConfig)) {
      await this.config.update(key, value, vscode.ConfigurationTarget.Global)
    }

    return customConfig
  }

  async importCustomConfiguration() {
    const fileUri = await vscode.window.showOpenDialog({
      canSelectFiles: true,
      canSelectFolders: false,
      canSelectMany: false,
      filters: {
        'JSON files': ['json']
      }
    })

    if (fileUri && fileUri[0]) {
      try {
        const fs = require('fs').promises
        const content = await fs.readFile(fileUri[0].fsPath, 'utf8')
        const config = JSON.parse(content)
        
        for (const [key, value] of Object.entries(config)) {
          await this.config.update(key, value, vscode.ConfigurationTarget.Global)
        }
        
        vscode.window.showInformationMessage("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
        return config
      } catch (error) {
        vscode.window.showErrorMessage(`–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ${error.message}`)
      }
    }
  }

  async selectSavedPreset() {
    const presets = this.config.get("configurationPresets", {})
    const presetNames = Object.keys(presets)
    
    if (presetNames.length === 0) {
      vscode.window.showInformationMessage("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤")
      return
    }

    const options = presetNames.map(name => ({
      label: name,
      description: presets[name].savedAt ? `–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${new Date(presets[name].savedAt).toLocaleDateString()}` : "",
      preset: presets[name]
    }))

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: "–í–∏–±–µ—Ä—ñ—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–µ—Å–µ—Ç",
      ignoreFocusOut: true
    })

    if (selected) {
      for (const [key, value] of Object.entries(selected.preset)) {
        await this.config.update(key, value, vscode.ConfigurationTarget.Global)
      }
      return selected.preset
    }
  }

  async askBoolean(question, defaultValue) {
    const options = [
      { label: "–¢–∞–∫", value: true },
      { label: "–ù—ñ", value: false }
    ]

    const selected = await vscode.window.showQuickPick(options, {
      placeHolder: question,
      ignoreFocusOut: true
    })

    return selected ? selected.value : defaultValue
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç—É
  async applyLastPreset() {
    const lastPreset = this.config.get("lastSelectedPreset", null)
    const savePreset = this.config.get("savePresetConfiguration", true)
    
    if (lastPreset && savePreset) {
      await this.applyPreset(lastPreset)
      return lastPreset
    }
    
    return null
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑—É –¥—ñ–∞–ª–æ–≥—É
  async forceShowDialog() {
    await this.config.update("forceFirstTimeSetup", true, vscode.ConfigurationTarget.Global)
    return await this.showFirstTimeDialog()
  }
}

module.exports = FirstTimeSetup