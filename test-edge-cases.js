const fs = require('fs');
const path = require('path');

// –¢–µ—Å—Ç–æ–≤—ñ –≤–∏–ø–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—Ä–∞–π–Ω—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
const edgeCaseTests = [
  {
    name: '–ü–æ—Ä–æ–∂–Ω—ñ–π HTML',
    html: '<!DOCTYPE html><html><head></head><body></body></html>',
    expectedClasses: []
  },
  {
    name: 'HTML –±–µ–∑ –∫–ª–∞—Å—ñ–≤',
    html: `<!DOCTYPE html>
<html>
<body>
  <div>
    <h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∫–ª–∞—Å—ñ–≤</h1>
    <p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ –±–µ–∑ –∫–ª–∞—Å—ñ–≤</p>
  </div>
</body>
</html>`,
    expectedClasses: []
  },
  {
    name: '–î—É–±–ª—ñ–∫–∞—Ç–∏ –∫–ª–∞—Å—ñ–≤',
    html: `<div class="container container main main">
  <p class="text text">–î—É–±–ª—ñ–∫–∞—Ç–∏</p>
</div>`,
    expectedClasses: ['container', 'main', 'text']
  },
  {
    name: '–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤ –∫–ª–∞—Å–∞—Ö',
    html: `<div class="my-class_name test123 -prefix">
  <span class="icon:before data-test">–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏</span>
</div>`,
    expectedClasses: ['my-class_name', 'test123', '-prefix', 'icon:before', 'data-test']
  },
  {
    name: '–î–æ–≤–≥—ñ –Ω–∞–∑–≤–∏ –∫–ª–∞—Å—ñ–≤',
    html: `<div class="very-long-class-name-that-exceeds-normal-length-and-should-be-handled-properly">
  <p class="another-extremely-long-class-name-for-testing-purposes-only">–î–æ–≤–≥—ñ –∫–ª–∞—Å–∏</p>
</div>`,
    expectedClasses: [
      'very-long-class-name-that-exceeds-normal-length-and-should-be-handled-properly',
      'another-extremely-long-class-name-for-testing-purposes-only'
    ]
  },
  {
    name: '–ö–∏—Ä–∏–ª—ñ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤ –∫–ª–∞—Å–∞—Ö',
    html: `<div class="–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ–ª–æ–≤–Ω–∏–π">
  <h1 class="–∑–∞–≥–æ–ª–æ–≤–æ–∫-—É–∫—Ä">–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–ª–∞—Å–∏</h1>
</div>`,
    expectedClasses: ['–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', '–≥–æ–ª–æ–≤–Ω–∏–π', '–∑–∞–≥–æ–ª–æ–≤–æ–∫-—É–∫—Ä']
  },
  {
    name: '–ó–º—ñ—à–∞–Ω—ñ –ª–∞–ø–∫–∏',
    html: `<div class='single-quotes' class="double-quotes">
  <span class='mixed "quotes" test'>–ó–º—ñ—à–∞–Ω—ñ –ª–∞–ø–∫–∏</span>
</div>`,
    expectedClasses: ['single-quotes', 'double-quotes', 'mixed', 'quotes', 'test']
  },
  {
    name: '–í–µ–ª–∏–∫–∏–π HTML —Ñ–∞–π–ª',
    html: generateLargeHTML(),
    expectedMinClasses: 100
  }
];

function generateLargeHTML() {
  let html = '<!DOCTYPE html><html><body>';
  
  for (let i = 0; i < 100; i++) {
    html += `
    <section class="section-${i} container-${i % 10}">
      <div class="wrapper-${i} content-${i % 5}">
        <h2 class="title-${i} heading-${i % 3}">–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${i}</h2>
        <p class="text-${i} paragraph-${i % 7}">–¢–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É ${i}</p>
        <button class="btn-${i} button-${i % 4}">–ö–Ω–æ–ø–∫–∞ ${i}</button>
      </div>
    </section>`;
  }
  
  html += '</body></html>';
  return html;
}

// –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
const performanceTests = [
  {
    name: '–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥—É',
    test: async (tester) => {
      const startTime = Date.now();
      const classes = tester.extractClasses(edgeCaseTests[7].html); // –í–µ–ª–∏–∫–∏–π HTML
      const endTime = Date.now();
      
      return {
        duration: endTime - startTime,
        classCount: classes.length,
        passed: endTime - startTime < 1000 // –ú–∞—î –±—É—Ç–∏ —à–≤–∏–¥—à–µ 1 —Å–µ–∫—É–Ω–¥–∏
      };
    }
  },
  {
    name: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–µ–ª–∏–∫–æ–≥–æ CSS',
    test: async (tester) => {
      const classes = Array.from({length: 1000}, (_, i) => `class-${i}`);
      const config = { includeComments: true, responsive: true, darkMode: true };
      
      const startTime = Date.now();
      const css = tester.generateCSS(classes, config);
      const endTime = Date.now();
      
      return {
        duration: endTime - startTime,
        outputSize: css.length,
        passed: endTime - startTime < 5000 // –ú–∞—î –±—É—Ç–∏ —à–≤–∏–¥—à–µ 5 —Å–µ–∫—É–Ω–¥
      };
    }
  }
];

// –¢–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
const validationTests = [
  {
    name: '–í–∞–ª—ñ–¥–Ω–∏–π CSS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å',
    test: (css) => {
      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
        const rules = css.split('}').filter(rule => rule.trim());
        
        for (const rule of rules) {
          if (rule.includes('{')) {
            const [selector, declarations] = rule.split('{');
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            if (!selector.trim()) {
              throw new Error('–ü–æ—Ä–æ–∂–Ω—ñ–π —Å–µ–ª–µ–∫—Ç–æ—Ä');
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ–π
            if (declarations) {
              const props = declarations.split(';').filter(p => p.trim());
              for (const prop of props) {
                if (prop.includes(':') && !prop.includes('/*')) {
                  const [property, value] = prop.split(':');
                  if (!property.trim() || !value.trim()) {
                    throw new Error(`–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å: ${prop}`);
                  }
                }
              }
            }
          }
        }
        
        return { passed: true };
      } catch (error) {
        return { passed: false, error: error.message };
      }
    }
  },
  {
    name: '–ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏',
    test: (css) => {
      const openBraces = (css.match(/{/g) || []).length;
      const closeBraces = (css.match(/}/g) || []).length;
      
      return {
        passed: openBraces === closeBraces,
        openBraces,
        closeBraces
      };
    }
  }
];

class EdgeCaseTester {
  constructor() {
    this.results = {
      edgeCases: [],
      performance: [],
      validation: []
    };
  }

  async runEdgeCaseTests() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤...\n');
    
    for (const test of edgeCaseTests) {
      try {
        const classes = this.extractClasses(test.html);
        
        let passed = false;
        if (test.expectedClasses) {
          passed = this.arraysEqual(classes.sort(), test.expectedClasses.sort());
        } else if (test.expectedMinClasses) {
          passed = classes.length >= test.expectedMinClasses;
        }
        
        this.results.edgeCases.push({
          name: test.name,
          passed,
          expected: test.expectedClasses || `–º—ñ–Ω. ${test.expectedMinClasses}`,
          actual: classes,
          actualCount: classes.length
        });
        
        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${test.name}: ${classes.length} –∫–ª–∞—Å—ñ–≤`);
        
      } catch (error) {
        this.results.edgeCases.push({
          name: test.name,
          passed: false,
          error: error.message
        });
        console.log(`‚ùå ${test.name}: –ü–æ–º–∏–ª–∫–∞ - ${error.message}`);
      }
    }
  }

  async runPerformanceTests() {
    console.log('\n‚ö° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...\n');
    
    for (const test of performanceTests) {
      try {
        const result = await test.test(this);
        
        this.results.performance.push({
          name: test.name,
          ...result
        });
        
        const status = result.passed ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${test.name}: ${result.duration}ms`);
        
      } catch (error) {
        this.results.performance.push({
          name: test.name,
          passed: false,
          error: error.message
        });
        console.log(`‚ùå ${test.name}: –ü–æ–º–∏–ª–∫–∞ - ${error.message}`);
      }
    }
  }

  async runValidationTests() {
    console.log('\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...\n');
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π CSS
    const testClasses = ['container', 'title', 'button', 'text'];
    const testConfig = {
      includeComments: true,
      includeReset: true,
      responsive: true,
      cssVariables: true
    };
    
    const css = this.generateCSS(testClasses, testConfig);
    
    for (const test of validationTests) {
      try {
        const result = test.test(css);
        
        this.results.validation.push({
          name: test.name,
          ...result
        });
        
        const status = result.passed ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${test.name}`);
        if (!result.passed && result.error) {
          console.log(`   –ü–æ–º–∏–ª–∫–∞: ${result.error}`);
        }
        
      } catch (error) {
        this.results.validation.push({
          name: test.name,
          passed: false,
          error: error.message
        });
        console.log(`‚ùå ${test.name}: –ü–æ–º–∏–ª–∫–∞ - ${error.message}`);
      }
    }
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ (–∫–æ–ø—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞)
  extractClasses(html) {
    const classRegex = /class\s*=\s*["']([^"']+)["']/g;
    const classes = new Set();
    let match;
    
    while ((match = classRegex.exec(html)) !== null) {
      match[1].split(/\s+/).forEach(cls => {
        if (cls.trim()) classes.add(cls.trim());
      });
    }
    
    return Array.from(classes);
  }

  generateCSS(classes, config) {
    let css = '';
    
    if (config.includeComments) {
      css += '/* –¢–µ—Å—Ç–æ–≤–∏–π CSS */\n';
    }

    if (config.includeReset) {
      css += '*, *::before, *::after { box-sizing: border-box; }\n';
    }

    if (config.cssVariables) {
      css += ':root { --primary: #007bff; }\n';
    }

    classes.forEach(className => {
      css += `.${className} {\n  /* –°—Ç–∏–ª—ñ –¥–ª—è ${className} */\n}\n`;
    });

    if (config.responsive) {
      css += '@media (min-width: 768px) {\n  .container { max-width: 1200px; }\n}\n';
    }

    return css;
  }

  arraysEqual(a, b) {
    return a.length === b.length && a.every((val, i) => val === b[i]);
  }

  generateReport() {
    console.log('\n=== –ó–í–Ü–¢ –ö–†–ê–ô–ù–Ü–• –í–ò–ü–ê–î–ö–Ü–í ===\n');
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∞–π–Ω—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    const edgePassed = this.results.edgeCases.filter(r => r.passed).length;
    const edgeTotal = this.results.edgeCases.length;
    console.log(`üß™ –ö—Ä–∞–π–Ω—ñ –≤–∏–ø–∞–¥–∫–∏: ${edgePassed}/${edgeTotal} –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const perfPassed = this.results.performance.filter(r => r.passed).length;
    const perfTotal = this.results.performance.length;
    console.log(`‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: ${perfPassed}/${perfTotal} –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    const validPassed = this.results.validation.filter(r => r.passed).length;
    const validTotal = this.results.validation.length;
    console.log(`üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è: ${validPassed}/${validTotal} –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    const totalPassed = edgePassed + perfPassed + validPassed;
    const totalTests = edgeTotal + perfTotal + validTotal;
    const percentage = Math.round((totalPassed / totalTests) * 100);
    
    console.log(`\nüìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${totalTests} (${percentage}%)`);
    
    if (percentage >= 90) {
      console.log('üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ! –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ.');
    } else if (percentage >= 70) {
      console.log('üëç –î–æ–±—Ä–µ! –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è. –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ.');
    }
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
    const reportPath = path.join(__dirname, 'test-output', 'edge-cases-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));
    console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${reportPath}`);
  }

  async runAllTests() {
    await this.runEdgeCaseTests();
    await this.runPerformanceTests();
    await this.runValidationTests();
    this.generateReport();
  }
}

module.exports = { EdgeCaseTester, edgeCaseTests, performanceTests, validationTests };

if (require.main === module) {
  const tester = new EdgeCaseTester();
  tester.runAllTests().catch(console.error);
}