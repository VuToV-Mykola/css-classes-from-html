/**
 * Configuration Manager –∑ 3 —Ä–µ–∂–∏–º–∞–º–∏ —Ä–æ–±–æ—Ç–∏
 * @version 2.1.0
 */

class ConfigurationManager {
  constructor() {
    this.configLoader = new (require('./configLoader'))();
    this.lastUsedSettings = null;
    this.lastSelectedMode = null;
    this.lastSelectedCanvas = [];
    this.lastSelectedLayers = [];
  }

  /**
   * –ü–æ–∫–∞–∑ –¥—ñ–∞–ª–æ–≥—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó - 3 —Ä–µ–∂–∏–º–∏
   */
  async showConfigurationDialog() {
    const lastSettings = await this.configLoader.loadLastSettings();
    
    const options = [
      {
        label: "‚ö° –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        description: "–¢—ñ–ª—å–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥ HTML —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª–∞—Å—ñ–≤",
        detail: "–®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç ‚Ä¢ –ë–µ–∑ Figma ‚Ä¢ –ë–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π",
        mode: "minimal",
        icon: "‚ö°"
      },
      {
        label: "üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
        description: "–ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Figma —Ç–∞ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ",
        detail: "Figma —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è ‚Ä¢ Canvas/Layers ‚Ä¢ ML matching ‚Ä¢ –í—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
        mode: "maximum",
        icon: "üöÄ"
      },
      {
        label: "üì¶ –ü—Ä–æ–¥–∞–∫—Ç",
        description: "–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π CSS –¥–ª—è production",
        detail: "–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è ‚Ä¢ –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ‚Ä¢ Canvas/Layers ‚Ä¢ Production-ready",
        mode: "production",
        icon: "üì¶"
      }
    ];

    // –í—ñ–¥–º—ñ—á–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä
    if (lastSettings?.mode) {
      options.forEach(opt => {
        if (opt.mode === lastSettings.mode) {
          opt.label += " ‚≠ê";
          opt.description += " (–æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—ñ—Ä)";
        }
      });
    }

    return options;
  }

  /**
   * –í–∏–±—ñ—Ä Canvas —Ç–∞ Layers
   */
  async selectCanvasAndLayers(figmaLink) {
    const canvasOptions = [
      { label: "üé® Desktop", value: "desktop", picked: this.lastSelectedCanvas.includes("desktop") },
      { label: "üì± Mobile", value: "mobile", picked: this.lastSelectedCanvas.includes("mobile") },
      { label: "üìã Tablet", value: "tablet", picked: this.lastSelectedCanvas.includes("tablet") },
      { label: "üß© Components", value: "components", picked: this.lastSelectedCanvas.includes("components") },
      { label: "üéØ All Canvas", value: "all", picked: this.lastSelectedCanvas.includes("all") }
    ];

    const layerOptions = [
      { label: "üìê Layout", value: "layout", picked: this.lastSelectedLayers.includes("layout") },
      { label: "üé® Styles", value: "styles", picked: this.lastSelectedLayers.includes("styles") },
      { label: "üî§ Typography", value: "typography", picked: this.lastSelectedLayers.includes("typography") },
      { label: "üñºÔ∏è Images", value: "images", picked: this.lastSelectedLayers.includes("images") },
      { label: "üîò Components", value: "components", picked: this.lastSelectedLayers.includes("components") },
      { label: "‚ú® Effects", value: "effects", picked: this.lastSelectedLayers.includes("effects") },
      { label: "üì¶ All Layers", value: "all", picked: this.lastSelectedLayers.includes("all") }
    ];

    return {
      canvasOptions,
      layerOptions
    };
  }

  /**
   * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É
   */
  async applyMode(mode) {
    const configs = {
      minimal: {
        includeGlobal: false,
        includeReset: false,
        includeComments: false,
        commentStyle: "standard",
        optimizeCSS: false,
        saveFigmaStyles: false,
        responsive: false,
        darkMode: false,
        cssVariables: false,
        minify: false,
        skipFigmaInput: true,
        minimal: true,
        enableInspection: false,
        enableHierarchyAnalysis: false,
        enableMLMatching: false
      },
      maximum: {
        includeGlobal: true,
        includeReset: true,
        includeComments: true,
        commentStyle: "author",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: true,
        cssVariables: true,
        minify: false,
        skipFigmaInput: false,
        minimal: false,
        enableInspection: true,
        enableHierarchyAnalysis: true,
        enableMLMatching: true,
        matchingStrategies: ["all"],
        confidenceThreshold: 0.8
      },
      production: {
        includeGlobal: true,
        includeReset: true,
        includeComments: false,
        commentStyle: "none",
        optimizeCSS: true,
        saveFigmaStyles: true,
        responsive: true,
        darkMode: false,
        cssVariables: true,
        minify: true,
        removeRedundant: true,
        removeEmptyRules: true,
        skipFigmaInput: false,
        minimal: false,
        enableInspection: true,
        enableHierarchyAnalysis: true,
        enableMLMatching: true,
        matchingStrategies: ["content", "structural", "ml"],
        confidenceThreshold: 0.9
      }
    };

    const config = configs[mode] || configs.minimal;
    
    console.log(`‚úÖ –†–µ–∂–∏–º "${mode}" –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!`);
    
    return config;
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  async loadLastSettings() {
    const saved = await this.configLoader.loadLastSettings();
    
    if (saved) {
      this.lastSelectedMode = saved.mode;
      this.lastSelectedCanvas = saved.selectedCanvas || [];
      this.lastSelectedLayers = saved.selectedLayers || [];
      
      console.log(`üìÇ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: ${saved.mode} —Ä–µ–∂–∏–º`);
    }
    
    return saved;
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
   */
  async saveSettings(settings) {
    settings.mode = this.lastSelectedMode;
    settings.selectedCanvas = this.lastSelectedCanvas;
    settings.selectedLayers = this.lastSelectedLayers;
    settings.timestamp = new Date().toISOString();
    
    await this.configLoader.saveLastSettings(settings);
    this.lastUsedSettings = settings;
    
    return settings;
  }
}

module.exports = ConfigurationManager;
