/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 */
class TestingUtils {
  constructor() {
    this.testResults = [];
    this.validationErrors = [];
  }
  async runFullTestSuite(integration) {
    console.log("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é...");

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó (–∑ –∑–∞–ø–∞—Å–Ω–∏–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
    const figmaData = integration.getFigmaData
      ? await integration.getFigmaData()
      : { hierarchy: new Map(), contentMap: new Map() };

    const htmlData = integration.getHTMLData
      ? await integration.getHTMLData()
      : { hierarchy: new Map(), classMap: new Map() };

    const matches = integration.getMatches
      ? await integration.getMatches(figmaData, htmlData)
      : { matches: new Map() };

    const generatedCSS = integration.generateCSS
      ? await integration.generateCSS(matches)
      : "";

    // –í–∏–∫–ª–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    const report = this.runCompleteTest(
      figmaData,
      htmlData,
      matches,
      generatedCSS
    );

    return {
      report,
      failed: report.errors.length,
      warnings: report.warnings.length,
      passed: report.results.filter((r) =>
        ["passed", "excellent", "good"].includes(r.status)
      ).length,
    };
  }
  // –î–æ–¥–∞—Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª–∞—Å—É TestingUtils
  async runFullTestSuite(figmaData, htmlData, matches, generatedCSS) {
    return this.runCompleteTest(figmaData, htmlData, matches, generatedCSS);
  }
  /**
   * –ü–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
   */
  runCompleteTest(figmaData, htmlData, matches, generatedCSS) {
    console.log("üß™ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...\n");

    // –¢–µ—Å—Ç 1: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    this.testDataIntegrity(figmaData, htmlData);

    // –¢–µ—Å—Ç 2: –Ø–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
    this.testMatchingQuality(matches, figmaData, htmlData);

    // –¢–µ—Å—Ç 3: –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å CSS
    this.testCSSValidity(generatedCSS);

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    this.testResponsiveDesign(generatedCSS);

    // –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    this.testAccessibility(generatedCSS, htmlData);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
    return this.generateTestReport();
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
   */
  testDataIntegrity(figmaData, htmlData) {
    console.log("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö...");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ Figma –¥–∞–Ω–∏—Ö
    if (!figmaData.hierarchy || figmaData.hierarchy.size === 0) {
      this.addError("FIGMA_DATA", "Figma —ñ—î—Ä–∞—Ä—Ö—ñ—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è");
    }

    if (!figmaData.contentMap || figmaData.contentMap.size === 0) {
      this.addWarning("FIGMA_DATA", "Figma contentMap –ø–æ—Ä–æ–∂–Ω—è");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ HTML –¥–∞–Ω–∏—Ö
    if (!htmlData.hierarchy || htmlData.hierarchy.size === 0) {
      this.addError("HTML_DATA", "HTML —ñ—î—Ä–∞—Ä—Ö—ñ—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è");
    }

    if (!htmlData.classMap || htmlData.classMap.size === 0) {
      this.addError(
        "HTML_DATA",
        "HTML classMap –ø–æ—Ä–æ–∂–Ω—è - –Ω–µ–º–∞—î –∫–ª–∞—Å—ñ–≤ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó"
      );
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
    figmaData.hierarchy.forEach((element, id) => {
      if (!element.name) {
        this.addWarning("FIGMA_CONSISTENCY", `–ï–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –º–∞—î –Ω–∞–∑–≤–∏`);
      }

      if (!element.styles || Object.keys(element.styles).length === 0) {
        this.addWarning(
          "FIGMA_STYLES",
          `–ï–ª–µ–º–µ–Ω—Ç ${element.name} –Ω–µ –º–∞—î —Å—Ç–∏–ª—ñ–≤`
        );
      }
    });

    this.addTestResult(
      "DATA_INTEGRITY",
      "passed",
      "–¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞"
    );
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
   */
  testMatchingQuality(matches, figmaData, htmlData) {
    console.log("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è...");

    const totalFigmaElements = figmaData.hierarchy.size;
    const totalHTMLClasses = htmlData.classMap.size;
    const matchedElements = matches.matches.size;

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ —è–∫–æ—Å—Ç—ñ
    const matchRate = (matchedElements / totalFigmaElements) * 100;
    const coverageRate = (matchedElements / totalHTMLClasses) * 100;

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è:`);
    console.log(`   Figma –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${totalFigmaElements}`);
    console.log(`   HTML –∫–ª–∞—Å—ñ–≤: ${totalHTMLClasses}`);
    console.log(`   –°–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${matchedElements}`);
    console.log(`   –í—ñ–¥—Å–æ—Ç–æ–∫ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${matchRate.toFixed(1)}%`);
    console.log(`   –ü–æ–∫—Ä–∏—Ç—Ç—è –∫–ª–∞—Å—ñ–≤: ${coverageRate.toFixed(1)}%\n`);

    // –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ
    if (matchRate >= 90) {
      this.addTestResult(
        "MATCH_QUALITY",
        "excellent",
        `–í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${matchRate.toFixed(1)}%`
      );
    } else if (matchRate >= 75) {
      this.addTestResult(
        "MATCH_QUALITY",
        "good",
        `–•–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${matchRate.toFixed(1)}%`
      );
    } else if (matchRate >= 50) {
      this.addTestResult(
        "MATCH_QUALITY",
        "fair",
        `–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${matchRate.toFixed(1)}%`
      );
      this.addWarning(
        "MATCH_QUALITY",
        "–ù–∏–∑—å–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –º–æ–∂–µ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Å—Ç–∏–ª—ñ–≤"
      );
    } else {
      this.addTestResult(
        "MATCH_QUALITY",
        "poor",
        `–ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${matchRate.toFixed(1)}%`
      );
      this.addError("MATCH_QUALITY", "–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è");
    }

    // –ê–Ω–∞–ª—ñ–∑ –¥–æ–≤—ñ—Ä–∏ –¥–æ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω—å
    const confidenceValues = Array.from(matches.matches.values()).map(
      (match) => match.confidence
    );
    const averageConfidence =
      confidenceValues.reduce((sum, conf) => sum + conf, 0) /
      confidenceValues.length;

    console.log(
      `üîç –°–µ—Ä–µ–¥–Ω—è –¥–æ–≤—ñ—Ä–∞ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${(averageConfidence * 100).toFixed(
        1
      )}%`
    );

    if (averageConfidence >= 0.9) {
      this.addTestResult(
        "MATCH_CONFIDENCE",
        "excellent",
        "–í–∏—Å–æ–∫–∞ –¥–æ–≤—ñ—Ä–∞ –¥–æ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω—å"
      );
    } else if (averageConfidence >= 0.7) {
      this.addTestResult(
        "MATCH_CONFIDENCE",
        "good",
        "–•–æ—Ä–æ—à–∞ –¥–æ–≤—ñ—Ä–∞ –¥–æ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω—å"
      );
    } else {
      this.addWarning(
        "MATCH_CONFIDENCE",
        "–ù–∏–∑—å–∫–∞ –¥–æ–≤—ñ—Ä–∞ –¥–æ –¥–µ—è–∫–∏—Ö —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω—å"
      );
    }
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ CSS
   */
  testCSSValidity(css) {
    console.log("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ CSS...");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É CSS
    const syntaxErrors = this.validateCSSSyntax(css);
    if (syntaxErrors.length > 0) {
      syntaxErrors.forEach((error) => {
        this.addError("CSS_SYNTAX", error);
      });
    } else {
      this.addTestResult("CSS_SYNTAX", "passed", "CSS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
    this.checkEssentialStyles(css);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É—á–∞—Å–Ω–∏—Ö CSS –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
    this.checkModernCSS(css);
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è CSS —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
   */
  validateCSSSyntax(css) {
    const errors = [];
    const lines = css.split("\n");

    let braceCount = 0;
    let inRule = false;

    lines.forEach((line, index) => {
      const trimmedLine = line.trim();

      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–æ–∫
      const openBraces = (line.match(/\{/g) || []).length;
      const closeBraces = (line.match(/\}/g) || []).length;

      braceCount += openBraces - closeBraces;

      if (openBraces > 0) inRule = true;
      if (closeBraces > 0) inRule = false;

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π CSS
      if (inRule && trimmedLine.includes(":") && !trimmedLine.includes("{")) {
        if (!trimmedLine.endsWith(";") && !trimmedLine.endsWith("{")) {
          errors.push(`–†—è–¥–æ–∫ ${index + 1}: –í—ñ–¥—Å—É—Ç–Ω—è –∫—Ä–∞–ø–∫–∞ –∑ –∫–æ–º–æ—é`);
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
      if (trimmedLine.endsWith("{") && !trimmedLine.includes("@")) {
        const selector = trimmedLine.replace("{", "").trim();
        if (selector.length === 0) {
          errors.push(`–†—è–¥–æ–∫ ${index + 1}: –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–µ–ª–µ–∫—Ç–æ—Ä`);
        }
      }
    });

    if (braceCount !== 0) {
      errors.push("–ù–µ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏");
    }

    return errors;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ç–∏–ª—ñ–≤
   */
  checkEssentialStyles(css) {
    const essentialChecks = [
      { pattern: /box-sizing:\s*border-box/, name: "Box-sizing reset" },
      { pattern: /\.container\s*{/, name: "–ö–ª–∞—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞" },
      { pattern: /@media/, name: "Media queries –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—ñ" },
      { pattern: /margin:\s*0/, name: "Reset —Å—Ç–∏–ª—ñ" },
    ];

    essentialChecks.forEach((check) => {
      if (check.pattern.test(css)) {
        this.addTestResult(
          "ESSENTIAL_STYLES",
          "passed",
          `${check.name} –ø—Ä–∏—Å—É—Ç–Ω—ñ–π`
        );
      } else {
        this.addWarning("ESSENTIAL_STYLES", `${check.name} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π`);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É—á–∞—Å–Ω–∏—Ö CSS –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
   */
  checkModernCSS(css) {
    const modernFeatures = [
      { pattern: /display:\s*grid/, name: "CSS Grid" },
      { pattern: /display:\s*flex/, name: "Flexbox" },
      { pattern: /@container/, name: "Container queries" },
      { pattern: /gap:/, name: "Gap property" },
      { pattern: /aspect-ratio:/, name: "Aspect ratio" },
      { pattern: /object-fit:/, name: "Object fit" },
    ];

    let modernCount = 0;
    modernFeatures.forEach((feature) => {
      if (feature.pattern.test(css)) {
        modernCount++;
        this.addTestResult(
          "MODERN_CSS",
          "passed",
          `${feature.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è`
        );
      }
    });

    if (modernCount >= 3) {
      this.addTestResult(
        "MODERN_CSS",
        "excellent",
        "–®–∏—Ä–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ CSS"
      );
    } else if (modernCount >= 1) {
      this.addTestResult(
        "MODERN_CSS",
        "good",
        "–ß–∞—Å—Ç–∫–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ CSS"
      );
    } else {
      this.addWarning(
        "MODERN_CSS",
        "–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—É—á–∞—Å–Ω—ñ CSS –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ"
      );
    }
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω—É
   */
  testResponsiveDesign(css) {
    console.log("üì± –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω—É...");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ media queries
    const mediaQueries =
      css.match(/@media[^{]*{[^{}]*({[^{}]*}[^{}]*)*}/g) || [];

    if (mediaQueries.length === 0) {
      this.addError("RESPONSIVE", "–í—ñ–¥—Å—É—Ç–Ω—ñ media queries");
      return;
    }

    console.log(`üìê –ó–Ω–∞–π–¥–µ–Ω–æ ${mediaQueries.length} media queries`);

    // –ê–Ω–∞–ª—ñ–∑ breakpoints
    const breakpoints = [];
    mediaQueries.forEach((mq) => {
      const widthMatch = mq.match(/(?:min-width|max-width):\s*(\d+)px/g);
      if (widthMatch) {
        widthMatch.forEach((match) => {
          const width = match.match(/\d+/)[0];
          breakpoints.push(parseInt(width));
        });
      }
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö breakpoints
    const standardBreakpoints = [768, 1024, 1200];
    const hasStandardBreakpoints = standardBreakpoints.some((bp) =>
      breakpoints.some((found) => Math.abs(found - bp) < 50)
    );

    if (hasStandardBreakpoints) {
      this.addTestResult(
        "RESPONSIVE",
        "passed",
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ breakpoints"
      );
    } else {
      this.addWarning("RESPONSIVE", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ breakpoints");
    }
  }

  /**
   * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
   */
  testAccessibility(css, htmlData) {
    console.log("‚ôø –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ...");

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä—ñ–≤
    this.checkColorContrast(css);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤
    this.checkFontSizes(css);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    this.checkInteractiveElements(css, htmlData);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ –∫–æ–ª—å–æ—Ä—ñ–≤
   */
  checkColorContrast(css) {
    const colorRegex = /#[0-9a-f]{6}|rgba?\([^)]*\)/gi;
    const colors = css.match(colorRegex) || [];

    if (colors.length > 0) {
      this.addTestResult(
        "ACCESSIBILITY",
        "info",
        `–ó–Ω–∞–π–¥–µ–Ω–æ ${colors.length} –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ`
      );
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—ñ WCAG
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤ —à—Ä–∏—Ñ—Ç—ñ–≤
   */
  checkFontSizes(css) {
    const fontSizeRegex = /font-size:\s*(\d+(?:\.\d+)?)px/g;
    const fontSizes = [];
    let match;

    while ((match = fontSizeRegex.exec(css)) !== null) {
      fontSizes.push(parseFloat(match[1]));
    }

    const minFontSize = Math.min(...fontSizes);

    if (minFontSize < 14) {
      this.addWarning(
        "ACCESSIBILITY",
        `–í–∏—è–≤–ª–µ–Ω—ñ –¥—É–∂–µ –º–∞–ª—ñ —à—Ä–∏—Ñ—Ç–∏: ${minFontSize}px`
      );
    } else if (minFontSize >= 16) {
      this.addTestResult(
        "ACCESSIBILITY",
        "passed",
        "–†–æ–∑–º—ñ—Ä–∏ —à—Ä–∏—Ñ—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º"
      );
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   */
  checkInteractiveElements(css, htmlData) {
    const buttonClasses = [];
    htmlData.classMap.forEach((elements, className) => {
      elements.forEach((element) => {
        if (element.tagName === "button" || className.includes("btn")) {
          buttonClasses.push(className);
        }
      });
    });

    buttonClasses.forEach((className) => {
      const hasHoverState = css.includes(`.${className}:hover`);
      const hasFocusState = css.includes(`.${className}:focus`);

      if (!hasHoverState) {
        this.addWarning(
          "ACCESSIBILITY",
          `–ö–Ω–æ–ø–∫–∞ .${className} –Ω–µ –º–∞—î :hover —Å—Ç–∞–Ω—É`
        );
      }

      if (!hasFocusState) {
        this.addWarning(
          "ACCESSIBILITY",
          `–ö–Ω–æ–ø–∫–∞ .${className} –Ω–µ –º–∞—î :focus —Å—Ç–∞–Ω—É`
        );
      }
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
   */
  generateTestReport() {
    const report = {
      timestamp: new Date().toISOString(),
      results: this.testResults,
      errors: this.validationErrors.filter((e) => e.type === "error"),
      warnings: this.validationErrors.filter((e) => e.type === "warning"),
      summary: this.generateSummary(),
    };

    console.log("\n" + "=".repeat(60));
    console.log("üìã –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø");
    console.log("=".repeat(60));

    console.log(
      `\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: ${
        this.testResults.filter(
          (r) =>
            r.status === "passed" ||
            r.status === "excellent" ||
            r.status === "good"
        ).length
      }`
    );
    console.log(`‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å: ${report.warnings.length}`);
    console.log(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${report.errors.length}`);

    if (report.errors.length > 0) {
      console.log("\nüö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò:");
      report.errors.forEach((error) => {
        console.log(`   - ${error.category}: ${error.message}`);
      });
    }

    if (report.warnings.length > 0) {
      console.log("\n‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:");
      report.warnings.forEach((warning) => {
        console.log(`   - ${warning.category}: ${warning.message}`);
      });
    }

    console.log("\n" + "=".repeat(60) + "\n");

    return report;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫—É
   */
  generateSummary() {
    const totalTests = this.testResults.length;
    const passedTests = this.testResults.filter(
      (r) =>
        r.status === "passed" || r.status === "excellent" || r.status === "good"
    ).length;

    const successRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0;

    let grade = "F";
    if (successRate >= 95) grade = "A+";
    else if (successRate >= 90) grade = "A";
    else if (successRate >= 85) grade = "A-";
    else if (successRate >= 80) grade = "B+";
    else if (successRate >= 75) grade = "B";
    else if (successRate >= 70) grade = "B-";
    else if (successRate >= 65) grade = "C+";
    else if (successRate >= 60) grade = "C";

    return {
      totalTests,
      passedTests,
      successRate: Math.round(successRate),
      grade,
      recommendation: this.getRecommendation(successRate),
    };
  }

  getRecommendation(successRate) {
    if (successRate >= 90) {
      return "–í—ñ–¥–º—ñ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.";
    } else if (successRate >= 75) {
      return "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.";
    } else if (successRate >= 60) {
      return "–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —É –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ.";
    } else {
      return "–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏. –ù–µ–æ–±—Ö—ñ–¥–Ω–µ —Å–µ—Ä–π–æ–∑–Ω–µ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è.";
    }
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
  addTestResult(category, status, message) {
    this.testResults.push({
      category,
      status,
      message,
      timestamp: new Date().toISOString(),
    });
  }

  addError(category, message) {
    this.validationErrors.push({
      type: "error",
      category,
      message,
      timestamp: new Date().toISOString(),
    });
  }

  addWarning(category, message) {
    this.validationErrors.push({
      type: "warning",
      category,
      message,
      timestamp: new Date().toISOString(),
    });
  }
}
// –ï–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
if (typeof module !== "undefined" && module.exports) {
  module.exports = TestingUtils;
}
