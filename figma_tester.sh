#!/bin/bash

# figma_tester.sh - —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ Figma API
# –í–∏–∫–æ–Ω–∞—Ç–∏: ./figma_tester.sh "<figma_url>" "<figma_token>"

set -o pipefail

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏ —Ç–µ–ø–µ—Ä —É ./logs/
LOG_DIR="./logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/figma_test_$(date +%Y%m%d_%H%M%S).log"

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ (–ø–æ–∫–∞–∑—É—î –ø–µ—Ä—à—ñ 4 —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 4 —Å–∏–º–≤–æ–ª–∏)
mask_token() {
    local t="$1"
    local len=${#t}
    if [ "$len" -le 8 ]; then
        echo "$t"
    else
        echo "${t:0:4}...${t: -4}"
    fi
}

# ‚ùå (—Ä—è–¥–æ–∫ 42-62) —Å—Ç–∞—Ä–∏–π –∫–æ–¥ üî¥
# extract_file_id() {
#     local file_id=""
#     local patterns=(
#       'file/([a-zA-Z0-9]{17,22})(/|$)'
#       'design/([a-zA-Z0-9]{17,22})(/|$)'
#       'figma\.com/(?:file|design)/([a-zA-Z0-9]{17,22})'
#       '([a-zA-Z0-9]{17,22})'
#     )
#     for pat in "${patterns[@]}"; do
#         if [[ $url =~ $pat ]]; then
#             file_id="${BASH_REMATCH[1]}"
#             break
#         fi
#     done
#     echo "$file_id"
# }
# ‚úÖ (—Ä—è–¥–æ–∫ 42-62) FIX: –ø–µ—Ä–µ–¥–∞—á–∞ $1 —Ç–∞ sed –¥–ª—è bash, –±–µ–∑ (?:) –≥—Ä—É–ø üü¢
extract_file_id() {
    local url="$1"
    local id=""

    id=$(echo "$url" | sed -nE 's#.*/(file|design)/([A-Za-z0-9]{17,22}).*#\2#p')
    if [ -n "$id" ]; then
        echo "$id"
        return 0
    fi

    id=$(echo "$url" | sed -nE 's#.*figma\.com/(file|design)/?([A-Za-z0-9]{17,22}).*#\2#p')
    if [ -n "$id" ]; then
        echo "$id"
        return 0
    fi

    id=$(echo "$url" | grep -oE '[A-Za-z0-9]{17,22}' | head -n1)
    echo "$id"
}

check_deps() {
    local missing=()
    command -v curl >/dev/null 2>&1 || missing+=("curl")
    command -v jq >/dev/null 2>&1 || missing+=("jq")
    if [ ${#missing[@]} -ne 0 ]; then
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: ${missing[*]}"
        exit 1
    fi
}

usage() {
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 <figma_url> <figma_token>"
    echo "–ê–±–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥—É."
}

URL_ARG="$1"
TOKEN_ARG="$2"

if [ -z "$URL_ARG" ]; then
    read -p "–í–≤–µ–¥—ñ—Ç—å Figma URL: " URL_ARG
fi
if [ -z "$TOKEN_ARG" ]; then
    read -s -p "–í–≤–µ–¥—ñ—Ç—å Figma Token: " TOKEN_ARG
    echo
fi

FIGMA_TOKEN="$TOKEN_ARG"

# ‚ùå (—Ä—è–¥–æ–∫ 99-103) —Å—Ç–∞—Ä–∏–π –∫–æ–¥ üî¥
# echo "‚úÖ File ID: ABC123def456GHI789jkl"
# file_id="ABC123def456GHI789jkl"
# echo "‚ÑπÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Figma API..."
# ‚úÖ (—Ä—è–¥–æ–∫ 99-103) FIX: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ extract_file_id üü¢
file_id="$(extract_file_id "$URL_ARG")"

if [ -z "$file_id" ]; then
    log "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ File ID –∑ URL: $URL_ARG"
    exit 1
fi

log "‚úÖ File ID: $file_id"
log "Token: $(mask_token "$FIGMA_TOKEN")"

OUT_JSON="$LOG_DIR/figma-${file_id}_$(date +%Y%m%d_%H%M%S).json"

log "‚ÑπÔ∏è –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Figma API..."
http_code=$(curl -sS -w "%{http_code}" -H "X-FIGMA-TOKEN: $FIGMA_TOKEN" "https://api.figma.com/v1/files/$file_id" -o "$OUT_JSON") || {
    log "‚ùå curl –Ω–µ –≤–∏–∫–æ–Ω–∞–≤—Å—è"
    exit 1
}

log "HTTP Code: $http_code"
if [ "$http_code" -ne 200 ]; then
    log "‚ùå Figma API –ø–æ–≤–µ—Ä–Ω—É–≤ HTTP $http_code. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–æ–∫–µ–Ω —Ç–∞ ID. –§–∞–π–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é: $OUT_JSON"
    exit 1
fi

log "‚úÖ Figma —Ñ–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: $OUT_JSON"

if command -v jq >/dev/null 2>&1; then
    title=$(jq -r '.name // "N/A"' "$OUT_JSON" 2>/dev/null || echo "N/A")
    log "‚ÑπÔ∏è –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É: $title"
fi

echo
log "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É —É—Å–ø—ñ—à–Ω–æ."

exit 0
